###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       14/Dec/2023  21:59:31
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\move.c
#    Command line =  
#        -f C:\Users\user\AppData\Local\Temp\EW5AD6.tmp
#        (C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\move.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\List -o
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\LCD\
#        -I C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\user\ -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\user\inc\ -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\ -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\List\move.lst
#    Object file  =  
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\Obj\move.o
#
###############################################################################

C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\move.c
      1          #include "move.h"
      2          #include <math.h>
      3          

   \                                 In section .bss, align 4
      4          uint32_t Move_Current_Time = 0;
   \                     Move_Current_Time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      5          uint32_t Move_Previous_Time = 0;
   \                     Move_Previous_Time:
   \   00000000                      DS8 4
      6          

   \                                 In section .text, align 2, keep-with-next
      7          int chkIsInCourse(const int *map_size, Point *current_Loc)
      8          {
   \                     chkIsInCourse: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
      9              int size = *map_size;
   \   00000004   0x6805             LDR      R5,[R0, #+0]
     10          
     11              for (int i = 0; i < size; i++) {
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xE000             B.N      ??chkIsInCourse_0
   \                     ??chkIsInCourse_1: (+1)
   \   0000000A   0x1C76             ADDS     R6,R6,#+1
   \                     ??chkIsInCourse_0: (+1)
   \   0000000C   0x42AE             CMP      R6,R5
   \   0000000E   0xDA18             BGE.N    ??chkIsInCourse_2
     12                  if (getCCW(target_Map[i], target_Map[(i + 1) % size], *current_Loc) == 0) {
   \   00000010   0x1C70             ADDS     R0,R6,#+1
   \   00000012   0xE9D4 0x2300      LDRD     R2,R3,[R4, #+0]
   \   00000016   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   0000001A   0xFB90 0xF1F5      SDIV     R1,R0,R5
   \   0000001E   0xFB05 0x0011      MLS      R0,R5,R1,R0
   \   00000022   0x....             LDR.N    R1,??DataTable2
   \   00000024   0xEB01 0x00C0      ADD      R0,R1,R0, LSL #+3
   \   00000028   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   0000002C   0x....             LDR.N    R0,??DataTable2
   \   0000002E   0xEB00 0x07C6      ADD      R7,R0,R6, LSL #+3
   \   00000032   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \   00000036   0x.... 0x....      BL       getCCW
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD1E5             BNE.N    ??chkIsInCourse_1
     13                      return 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xE000             B.N      ??chkIsInCourse_3
     14                  }
     15              }
     16          
     17              return 0;
   \                     ??chkIsInCourse_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \                     ??chkIsInCourse_3: (+1)
   \   00000044   0xBDFE             POP      {R1-R7,PC}       ;; return
     18          }
     19          

   \                                 In section .text, align 2, keep-with-next
     20          float getTheta(Point p0, Point p1, Point p2)
     21          {
   \                     getTheta: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x4690             MOV      R8,R2
   \   0000000C   0x4699             MOV      R9,R3
   \   0000000E   0xE9DD 0x670E      LDRD     R6,R7,[SP, #+56]
     22              Point v0 = {p1.x - p0.x, p1.y - p0.y}, v1 = {p2.x - p0.x, p2.y - p0.y};
   \   00000012   0x4640             MOV      R0,R8
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x.... 0x....      BL       __aeabi_fsub
   \   0000001A   0x9002             STR      R0,[SP, #+8]
   \   0000001C   0x4648             MOV      R0,R9
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x.... 0x....      BL       __aeabi_fsub
   \   00000024   0x9003             STR      R0,[SP, #+12]
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0x0021             MOVS     R1,R4
   \   0000002A   0x.... 0x....      BL       __aeabi_fsub
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x0038             MOVS     R0,R7
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x.... 0x....      BL       __aeabi_fsub
   \   00000038   0x9001             STR      R0,[SP, #+4]
     23          
     24              float dot = v0.x * v1.x + v0.y * v1.y;
   \   0000003A   0x9902             LDR      R1,[SP, #+8]
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x4682             MOV      R10,R0
   \   00000044   0x9903             LDR      R1,[SP, #+12]
   \   00000046   0x9801             LDR      R0,[SP, #+4]
   \   00000048   0x.... 0x....      BL       __aeabi_fmul
   \   0000004C   0x4651             MOV      R1,R10
   \   0000004E   0x.... 0x....      BL       __aeabi_fadd
   \   00000052   0x4683             MOV      R11,R0
     25              float det = getDistance(p0, p1) * getDistance(p0, p2);
   \   00000054   0x4642             MOV      R2,R8
   \   00000056   0x464B             MOV      R3,R9
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x0029             MOVS     R1,R5
   \   0000005C   0x.... 0x....      BL       getDistance
   \   00000060   0x4682             MOV      R10,R0
   \   00000062   0x0032             MOVS     R2,R6
   \   00000064   0x003B             MOVS     R3,R7
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x0029             MOVS     R1,R5
   \   0000006A   0x.... 0x....      BL       getDistance
   \   0000006E   0x4651             MOV      R1,R10
   \   00000070   0x.... 0x....      BL       __aeabi_fmul
   \   00000074   0x0001             MOVS     R1,R0
     26          
     27              return acosf(dot / det) * (float)getCCW(p0, p1, p2);
   \   00000076   0x4658             MOV      R0,R11
   \   00000078   0x.... 0x....      BL       __aeabi_fdiv
   \   0000007C   0x.... 0x....      BL       acosf
   \   00000080   0x4682             MOV      R10,R0
   \   00000082   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \   00000086   0x4642             MOV      R2,R8
   \   00000088   0x464B             MOV      R3,R9
   \   0000008A   0x0020             MOVS     R0,R4
   \   0000008C   0x0029             MOVS     R1,R5
   \   0000008E   0x.... 0x....      BL       getCCW
   \   00000092   0x.... 0x....      BL       __aeabi_i2f
   \   00000096   0x4651             MOV      R1,R10
   \   00000098   0x.... 0x....      BL       __aeabi_fmul
   \   0000009C   0xB005             ADD      SP,SP,#+20
   \   0000009E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     28          }
     29          

   \                                 In section .text, align 2, keep-with-next
     30          int chkArrived(Point p0, Point p1)
     31          {
   \                     chkArrived: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     32              return getDistance(p0, p1) < THRESHOLD;
   \   00000002   0x.... 0x....      BL       getDistance
   \   00000006   0x....             LDR.N    R1,??DataTable2_1  ;; 0x3dcccccd
   \   00000008   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000000C   0xD201             BCS.N    ??chkArrived_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??chkArrived_1
   \                     ??chkArrived_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??chkArrived_1: (+1)
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
     33          }
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void moveForwardToNextPoint(Point *next_Point)
     36          {
   \                     moveForwardToNextPoint: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
     37              Point current_Point = target_Map[target_Map_Idx], before_Point = source_Map_Idx == 0 ? target_Map[0] : source_Map[source_Map_Idx - 1];
   \   00000006   0x....             LDR.N    R1,??DataTable2
   \   00000008   0x....             LDR.N    R2,??DataTable2_2
   \   0000000A   0x6812             LDR      R2,[R2, #+0]
   \   0000000C   0xEB01 0x01C2      ADD      R1,R1,R2, LSL #+3
   \   00000010   0xE9D1 0x4500      LDRD     R4,R5,[R1, #+0]
   \   00000014   0x....             LDR.N    R1,??DataTable2_3
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD103             BNE.N    ??moveForwardToNextPoint_0
   \   0000001C   0x....             LDR.N    R1,??DataTable2
   \   0000001E   0xE9D1 0x8900      LDRD     R8,R9,[R1, #+0]
   \   00000022   0xE007             B.N      ??moveForwardToNextPoint_1
   \                     ??moveForwardToNextPoint_0: (+1)
   \   00000024   0x....             LDR.N    R1,??DataTable2_4
   \   00000026   0x....             LDR.N    R2,??DataTable2_3
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0xEB01 0x01C2      ADD      R1,R1,R2, LSL #+3
   \   0000002E   0x3908             SUBS     R1,R1,#+8
   \   00000030   0xE9D1 0x8900      LDRD     R8,R9,[R1, #+0]
   \                     ??moveForwardToNextPoint_1: (+1)
   \   00000034   0x0006             MOVS     R6,R0
     38          
     39              float thetaWithBefore = getTheta(before_Point, current_Point, *next_Point);
   \   00000036   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \   0000003A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000003E   0x0022             MOVS     R2,R4
   \   00000040   0x002B             MOVS     R3,R5
   \   00000042   0x4640             MOV      R0,R8
   \   00000044   0x4649             MOV      R1,R9
   \   00000046   0x.... 0x....      BL       getTheta
   \   0000004A   0x0002             MOVS     R2,R0
     40          
     41              if (thetaWithBefore != 0) {
   \   0000004C   0x0010             MOVS     R0,R2
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000054   0xD04A             BEQ.N    ??moveForwardToNextPoint_2
     42                  // Hardware-Level Control
     43                  motorRotate(thetaWithBefore);
                         ^
Warning[Pe223]: function "motorRotate" declared implicitly
   \   00000056   0x0010             MOVS     R0,R2
   \   00000058   0x.... 0x....      BL       __aeabi_f2d
   \   0000005C   0x.... 0x....      BL       motorRotate
   \   00000060   0xE044             B.N      ??moveForwardToNextPoint_2
     44              }
     45          
     46              while(chkArrived(current_Point, *next_Point) == 0 && getCCW(*next_Point, (Point){next_Point->x + 1, next_Point->y}, current_Point) >= 0) {
     47                  // Can be interrupted by sensors
     48                  float thetaWithX = getTheta(current_Point, (Point){current_Point.x + 1, current_Point.y}, *next_Point);
   \                     ??moveForwardToNextPoint_3: (+1)
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000068   0x.... 0x....      BL       __aeabi_fadd
   \   0000006C   0x9002             STR      R0,[SP, #+8]
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0x9003             STR      R0,[SP, #+12]
   \   00000072   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \   00000076   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000007A   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x0029             MOVS     R1,R5
   \   00000082   0x.... 0x....      BL       getTheta
   \   00000086   0x0007             MOVS     R7,R0
     49          
     50                  // Hardware-Level Control
     51                  ONE_TICK_FORWARD();
   \   00000088   0x.... 0x....      BL       ONE_TICK_FORWARD
     52          
     53                  current_Point.x += FORWARD_TICK * cosf(thetaWithX);
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0x.... 0x....      BL       __aeabi_f2d
   \   00000092   0x4680             MOV      R8,R0
   \   00000094   0x4689             MOV      R9,R1
   \   00000096   0x0038             MOVS     R0,R7
   \   00000098   0x.... 0x....      BL       cosf
   \   0000009C   0x.... 0x....      BL       __aeabi_f2d
   \   000000A0   0x2200             MOVS     R2,#+0
   \   000000A2   0x....             LDR.N    R3,??DataTable2_5  ;; 0x3ff00000
   \   000000A4   0x.... 0x....      BL       __aeabi_dmul
   \   000000A8   0x0002             MOVS     R2,R0
   \   000000AA   0x000B             MOVS     R3,R1
   \   000000AC   0x4640             MOV      R0,R8
   \   000000AE   0x4649             MOV      R1,R9
   \   000000B0   0x.... 0x....      BL       __aeabi_dadd
   \   000000B4   0x.... 0x....      BL       __aeabi_d2f
   \   000000B8   0x0004             MOVS     R4,R0
     54                  current_Point.y += FORWARD_TICK * sinf(thetaWithX);
   \   000000BA   0x0028             MOVS     R0,R5
   \   000000BC   0x.... 0x....      BL       __aeabi_f2d
   \   000000C0   0x4680             MOV      R8,R0
   \   000000C2   0x4689             MOV      R9,R1
   \   000000C4   0x0038             MOVS     R0,R7
   \   000000C6   0x.... 0x....      BL       sinf
   \   000000CA   0x.... 0x....      BL       __aeabi_f2d
   \   000000CE   0x0002             MOVS     R2,R0
   \   000000D0   0x000B             MOVS     R3,R1
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x....             LDR.N    R1,??DataTable2_5  ;; 0x3ff00000
   \   000000D6   0x.... 0x....      BL       __aeabi_dmul
   \   000000DA   0x0002             MOVS     R2,R0
   \   000000DC   0x000B             MOVS     R3,R1
   \   000000DE   0x4640             MOV      R0,R8
   \   000000E0   0x4649             MOV      R1,R9
   \   000000E2   0x.... 0x....      BL       __aeabi_dadd
   \   000000E6   0x.... 0x....      BL       __aeabi_d2f
   \   000000EA   0x0005             MOVS     R5,R0
     55              }
   \                     ??moveForwardToNextPoint_2: (+1)
   \   000000EC   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \   000000F0   0x0020             MOVS     R0,R4
   \   000000F2   0x0029             MOVS     R1,R5
   \   000000F4   0x.... 0x....      BL       chkArrived
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD111             BNE.N    ??moveForwardToNextPoint_4
   \   000000FC   0x6830             LDR      R0,[R6, #+0]
   \   000000FE   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000102   0x.... 0x....      BL       __aeabi_fadd
   \   00000106   0x4682             MOV      R10,R0
   \   00000108   0x6870             LDR      R0,[R6, #+4]
   \   0000010A   0x4683             MOV      R11,R0
   \   0000010C   0xE9CD 0x4500      STRD     R4,R5,[SP, #+0]
   \   00000110   0x4652             MOV      R2,R10
   \   00000112   0x465B             MOV      R3,R11
   \   00000114   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \   00000118   0x.... 0x....      BL       getCCW
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD5A0             BPL.N    ??moveForwardToNextPoint_3
     56          
     57              if (chkArrived(current_Point, *next_Point) != 0) {
   \                     ??moveForwardToNextPoint_4: (+1)
   \   00000120   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \   00000124   0x0020             MOVS     R0,R4
   \   00000126   0x0029             MOVS     R1,R5
   \   00000128   0x.... 0x....      BL       chkArrived
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD00E             BEQ.N    ??moveForwardToNextPoint_5
     58                  source_Map[source_Map_Idx] = current_Point;
   \   00000130   0x....             LDR.N    R0,??DataTable2_4
   \   00000132   0x....             LDR.N    R1,??DataTable2_3
   \   00000134   0x6809             LDR      R1,[R1, #+0]
   \   00000136   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   0000013A   0xE9C0 0x4500      STRD     R4,R5,[R0, #+0]
     59                  source_Map_Idx++;
   \   0000013E   0x....             LDR.N    R0,??DataTable2_3
   \   00000140   0x6800             LDR      R0,[R0, #+0]
   \   00000142   0x1C40             ADDS     R0,R0,#+1
   \   00000144   0x....             LDR.N    R1,??DataTable2_3
   \   00000146   0x6008             STR      R0,[R1, #+0]
     60                  moveForwardToNextPoint(next_Point);
   \   00000148   0x0030             MOVS     R0,R6
   \   0000014A   0xF7FF 0xFF59      BL       moveForwardToNextPoint
     61              }
     62          }
   \                     ??moveForwardToNextPoint_5: (+1)
   \   0000014E   0xB005             ADD      SP,SP,#+20
   \   00000150   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     target_Map

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x3DCCCCCD         DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     target_Map_Idx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     source_Map_Idx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     source_Map

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   chkArrived
         8   -> getDistance
         8 __aeabi_cfcmple
      32   chkIsInCourse
        32   -> getCCW
      56   getTheta
        56   -> __aeabi_fadd
        56   -> __aeabi_fdiv
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> __aeabi_i2f
        56   -> acosf
        56   -> getCCW
        56   -> getDistance
      56   moveForwardToNextPoint
        56   -> ONE_TICK_FORWARD
        56   -> __aeabi_d2f
        56   -> __aeabi_dadd
        56   -> __aeabi_dmul
        56   -> __aeabi_f2d
        56   -> __aeabi_fadd
        56   -> chkArrived
        56   -> cosf
        56   -> getCCW
        56   -> getTheta
        56   -> motorRotate
        56   -> moveForwardToNextPoint
        56   -> sinf
        56 __aeabi_cfcmpeq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  Move_Current_Time
       4  Move_Previous_Time
      24  chkArrived
      70  chkIsInCourse
     162  getTheta
     340  moveForwardToNextPoint

 
   8 bytes in section .bss
 620 bytes in section .text
 
 620 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: 1
