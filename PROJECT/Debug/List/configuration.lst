###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       14/Dec/2023  22:01:55
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\configuration.c
#    Command line =  
#        -f C:\Users\user\AppData\Local\Temp\EW9151.tmp
#        (C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\configuration.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\List -o
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\LCD\
#        -I C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\user\ -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\user\inc\ -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\ -I
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\List\configuration.lst
#    Object file  =  
#        C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\Debug\Obj\configuration.o
#
###############################################################################

C:\Users\user\Desktop\1214\testing-ground-main\PROJECT\libraries\USER\configuration.c
      1          #include "configuration.h"
      2          

   \                                 In section .bss, align 4
      3          uint32_t Current_Time = 0;
   \                     Current_Time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      4          uint32_t Previous_Time = 0;
   \                     Previous_Time:
   \   00000000                      DS8 4
      5          

   \                                 In section .bss, align 2
      6          uint16_t Right_Interrupt_Status;
   \                     Right_Interrupt_Status:
   \   00000000                      DS8 2
      7          

   \                                 In section .bss, align 4
      8          EXTI_InitTypeDef EXTI_InitStructure;
   \                     EXTI_InitStructure:
   \   00000000                      DS8 8
      9          

   \                                 In section .bss, align 4
     10          TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
   \                     TIM_TimeBaseStructure:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     11          TIM_OCInitTypeDef TIM_OCInitStructure;
   \                     TIM_OCInitStructure:
   \   00000000                      DS8 16
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void Right_Interrupt_Enable(void)
     14          {
   \                     Right_Interrupt_Enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     15               Right_Interrupt_Status = 1;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable9
   \   00000008   0x8008             STRH     R0,[R1, #+0]
     16               EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000010   0x7188             STRB     R0,[R1, #+6]
     17               EXTI_Init(&EXTI_InitStructure);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000016   0x.... 0x....      BL       EXTI_Init
     18          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void Right_Interrupt_Disable(void)
     21          {
   \                     Right_Interrupt_Disable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     22              Right_Interrupt_Status = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable9
   \   00000008   0x8008             STRH     R0,[R1, #+0]
     23               EXTI_InitStructure.EXTI_LineCmd = DISABLE;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000010   0x7188             STRB     R0,[R1, #+6]
     24               EXTI_Init(&EXTI_InitStructure);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000016   0x.... 0x....      BL       EXTI_Init
     25          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void RCC_Configuration(void)
     28          {
   \                     RCC_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     29               RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x7000      MOV      R0,#+512
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     30               RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2004             MOVS     R0,#+4
   \   00000010   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     31               RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2010             MOVS     R0,#+16
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     32               RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2020             MOVS     R0,#+32
   \   00000020   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     33               RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x2040             MOVS     R0,#+64
   \   00000028   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     34               RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000032   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     35               RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000003C   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     36               RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     37               
     38               RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     39               RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     40           }
   \   00000058   0xBD01             POP      {R0,PC}          ;; return
     41          

   \                                 In section .text, align 2, keep-with-next
     42           void GPIO_Configuration(void)
     43           {
   \                     GPIO_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     44               GPIO_InitTypeDef GPIO_InitStructure;
     45               /* motor driver setting */
     46               GPIO_InitStructure.GPIO_Pin = GPIO_Motor_In1_Pin | GPIO_Motor_In2_Pin;
   \   00000002   0x200C             MOVS     R0,#+12
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     47               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000008   0x2010             MOVS     R0,#+16
   \   0000000A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     48               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
     49          
     50               GPIO_Init(GPIO_Left_Motor_Port, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable9_2  ;; 0x40011800
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     51          
     52               GPIO_InitStructure.GPIO_Pin = GPIO_Motor_In3_Pin | GPIO_Motor_In4_Pin;
   \   0000001E   0x2030             MOVS     R0,#+48
   \   00000020   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     53               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000024   0x2010             MOVS     R0,#+16
   \   00000026   0xF88D 0x0003      STRB     R0,[SP, #+3]
     54               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000002A   0x2003             MOVS     R0,#+3
   \   0000002C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     55               GPIO_Init(GPIO_Right_Motor_Port, &GPIO_InitStructure);
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable9_2  ;; 0x40011800
   \   00000036   0x.... 0x....      BL       GPIO_Init
     56          
     57               /* USART1 pin setting */
     58               //TX
     59               GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   0000003A   0xF44F 0x7000      MOV      R0,#+512
   \   0000003E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     60               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0xF88D 0x0002      STRB     R0,[SP, #+2]
     61               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000048   0x2018             MOVS     R0,#+24
   \   0000004A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     62               GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000004E   0x4669             MOV      R1,SP
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x40010800
   \   00000054   0x.... 0x....      BL       GPIO_Init
     63              //RX
     64               GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   \   00000058   0xF44F 0x6080      MOV      R0,#+1024
   \   0000005C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     65               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU | GPIO_Mode_IPD;
                                                   ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000060   0x2068             MOVS     R0,#+104
   \   00000062   0xF88D 0x0003      STRB     R0,[SP, #+3]
     66               GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x40010800
   \   0000006C   0x.... 0x....      BL       GPIO_Init
     67               
     68               
     69               //TX
     70               GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000070   0x2004             MOVS     R0,#+4
   \   00000072   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     71               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0xF88D 0x0002      STRB     R0,[SP, #+2]
     72               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   0000007C   0x2018             MOVS     R0,#+24
   \   0000007E   0xF88D 0x0003      STRB     R0,[SP, #+3]
     73               GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000082   0x4669             MOV      R1,SP
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x40010800
   \   00000088   0x.... 0x....      BL       GPIO_Init
     74              //RX
     75               GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \   0000008C   0x2008             MOVS     R0,#+8
   \   0000008E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     76               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU | GPIO_Mode_IPD;
                                                   ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000092   0x2068             MOVS     R0,#+104
   \   00000094   0xF88D 0x0003      STRB     R0,[SP, #+3]
     77               GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000098   0x4669             MOV      R1,SP
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x40010800
   \   0000009E   0x.... 0x....      BL       GPIO_Init
     78          
     79          //     /* jodo sensor setting */
     80               GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
   \   000000A2   0x2002             MOVS     R0,#+2
   \   000000A4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     81               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xF88D 0x0003      STRB     R0,[SP, #+3]
     82               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000AE   0x2003             MOVS     R0,#+3
   \   000000B0   0xF88D 0x0002      STRB     R0,[SP, #+2]
     83               GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   000000B4   0x4669             MOV      R1,SP
   \   000000B6   0x....             LDR.N    R0,??DataTable9_4  ;; 0x40011000
   \   000000B8   0x.... 0x....      BL       GPIO_Init
     84          
     85          //     /* @@@ ?@@ setting */
     86               GPIO_InitStructure.GPIO_Pin = GPIO_Prox_Front_Pin | GPIO_Prox_Right_Pin;
   \   000000BC   0x2018             MOVS     R0,#+24
   \   000000BE   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     87               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   \   000000C2   0x2028             MOVS     R0,#+40
   \   000000C4   0xF88D 0x0003      STRB     R0,[SP, #+3]
     88               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0xF88D 0x0002      STRB     R0,[SP, #+2]
     89               GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   000000CE   0x4669             MOV      R1,SP
   \   000000D0   0x....             LDR.N    R0,??DataTable9_4  ;; 0x40011000
   \   000000D2   0x.... 0x....      BL       GPIO_Init
     90               
     91               /*
     92               GPIO_InitStructure.GPIO_Pin = GPIO_Prox_Front_Pin | GPIO_Prox_Right_Pin;
     93               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
     94               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     95               GPIO_Init(GPIOD, &GPIO_InitStructure);*/
     96               
     97               // Debuggin LED
     98               GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
   \   000000D6   0x2080             MOVS     R0,#+128
   \   000000D8   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     99               GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   000000DC   0x2010             MOVS     R0,#+16
   \   000000DE   0xF88D 0x0003      STRB     R0,[SP, #+3]
    100               GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000E2   0x2003             MOVS     R0,#+3
   \   000000E4   0xF88D 0x0002      STRB     R0,[SP, #+2]
    101               GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000000E8   0x4669             MOV      R1,SP
   \   000000EA   0x....             LDR.N    R0,??DataTable9_5  ;; 0x40011400
   \   000000EC   0x.... 0x....      BL       GPIO_Init
    102           }
   \   000000F0   0xBD01             POP      {R0,PC}          ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104           void EXTI_Configure(void)
    105           {
   \                     EXTI_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    106               GPIO_EXTILineConfig(GPIO_Prox_Front_PortSource, GPIO_Prox_Front_PinSource);
   \   00000002   0x2103             MOVS     R1,#+3
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       GPIO_EXTILineConfig
    107               EXTI_InitStructure.EXTI_Line = EXTI_Prox_Front_Line;
   \   0000000A   0x2008             MOVS     R0,#+8
   \   0000000C   0x....             LDR.N    R1,??DataTable9_1
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    108               EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable9_1
   \   00000014   0x7108             STRB     R0,[R1, #+4]
    109               EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \   00000016   0x200C             MOVS     R0,#+12
   \   00000018   0x....             LDR.N    R1,??DataTable9_1
   \   0000001A   0x7148             STRB     R0,[R1, #+5]
    110               EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable9_1
   \   00000020   0x7188             STRB     R0,[R1, #+6]
    111               EXTI_Init(&EXTI_InitStructure);
   \   00000022   0x....             LDR.N    R0,??DataTable9_1
   \   00000024   0x.... 0x....      BL       EXTI_Init
    112          
    113               GPIO_EXTILineConfig(GPIO_Prox_Right_PortSource, GPIO_Prox_Right_PinSource);
   \   00000028   0x2104             MOVS     R1,#+4
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x.... 0x....      BL       GPIO_EXTILineConfig
    114               EXTI_InitStructure.EXTI_Line = EXTI_Prox_Right_Line;
   \   00000030   0x2010             MOVS     R0,#+16
   \   00000032   0x....             LDR.N    R1,??DataTable9_1
   \   00000034   0x6008             STR      R0,[R1, #+0]
    115               EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable9_1
   \   0000003A   0x7108             STRB     R0,[R1, #+4]
    116               EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   \   0000003C   0x2008             MOVS     R0,#+8
   \   0000003E   0x....             LDR.N    R1,??DataTable9_1
   \   00000040   0x7148             STRB     R0,[R1, #+5]
    117               EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable9_1
   \   00000046   0x7188             STRB     R0,[R1, #+6]
    118               EXTI_Init(&EXTI_InitStructure);
   \   00000048   0x....             LDR.N    R0,??DataTable9_1
   \   0000004A   0x.... 0x....      BL       EXTI_Init
    119               
    120               /*
    121               GPIO_EXTILineConfig(GPIO_Prox_Front_PortSource2, GPIO_Prox_Front_PinSource);
    122               EXTI_InitStructure.EXTI_Line = EXTI_Prox_Front_Line;
    123               EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    124               EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
    125               EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    126               EXTI_Init(&EXTI_InitStructure);
    127          
    128               GPIO_EXTILineConfig(GPIO_Prox_Right_PortSource2, GPIO_Prox_Right_PinSource);
    129               EXTI_InitStructure.EXTI_Line = EXTI_Prox_Right_Line;
    130               EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    131               EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
    132               EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    133               EXTI_Init(&EXTI_InitStructure);*/
    134               
    135               Right_Interrupt_Status = 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x....             LDR.N    R1,??DataTable9
   \   00000052   0x8008             STRH     R0,[R1, #+0]
    136           }
   \   00000054   0xBD01             POP      {R0,PC}          ;; return
    137          
    138          

   \                                 In section .text, align 2, keep-with-next
    139           void USART12_Init(void)
    140           {
   \                     USART12_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
    141               USART_InitTypeDef USART1_InitStructure;
    142               USART_InitTypeDef USART2_InitStructure;
    143               USART_Cmd(USART1, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013800
   \   00000008   0x.... 0x....      BL       USART_Cmd
    144             
    145               USART1_InitStructure.USART_BaudRate = 9600;
   \   0000000C   0xF44F 0x5016      MOV      R0,#+9600
   \   00000010   0x9004             STR      R0,[SP, #+16]
    146               USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    147               USART1_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000018   0x200C             MOVS     R0,#+12
   \   0000001A   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    148               USART1_InitStructure.USART_Parity = USART_Parity_No;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    149               USART1_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    150               USART1_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    151             
    152               USART_Init(USART1, &USART1_InitStructure);
   \   00000030   0xA904             ADD      R1,SP,#+16
   \   00000032   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013800
   \   00000034   0x.... 0x....      BL       USART_Init
    153               USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0xF240 0x5125      MOVW     R1,#+1317
   \   0000003E   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013800
   \   00000040   0x.... 0x....      BL       USART_ITConfig
    154               
    155               USART_Cmd(USART2, ENABLE);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40004400
   \   00000048   0x.... 0x....      BL       USART_Cmd
    156             
    157               USART2_InitStructure.USART_BaudRate = 9600;
   \   0000004C   0xF44F 0x5016      MOV      R0,#+9600
   \   00000050   0x9000             STR      R0,[SP, #+0]
    158               USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    159               USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000058   0x200C             MOVS     R0,#+12
   \   0000005A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    160               USART2_InitStructure.USART_Parity = USART_Parity_No;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    161               USART2_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    162               USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    163             
    164               USART_Init(USART2, &USART2_InitStructure);
   \   00000070   0x4669             MOV      R1,SP
   \   00000072   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40004400
   \   00000074   0x.... 0x....      BL       USART_Init
    165               USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \   00000078   0x2201             MOVS     R2,#+1
   \   0000007A   0xF240 0x5125      MOVW     R1,#+1317
   \   0000007E   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40004400
   \   00000080   0x.... 0x....      BL       USART_ITConfig
    166           }
   \   00000084   0xB009             ADD      SP,SP,#+36
   \   00000086   0xBD00             POP      {PC}             ;; return
    167          

   \                                 In section .text, align 2, keep-with-next
    168           void NVIC_Configuration(void)
    169           {
   \                     NVIC_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    170               NVIC_InitTypeDef NVIC_InitStructure;
    171               NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \   00000002   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    172          
    173               NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
   \   0000000A   0x201C             MOVS     R0,#+28
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    174               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0001      STRB     R0,[SP, #+1]
    175               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0002      STRB     R0,[SP, #+2]
    176               NVIC_Init(&NVIC_InitStructure); 
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x.... 0x....      BL       NVIC_Init
    177          
    178               /* Prox sensor setting */
    179          
    180          
    181               NVIC_InitStructure.NVIC_IRQChannel = EXTI_Prox_Front_IRQn;
   \   00000022   0x2009             MOVS     R0,#+9
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
    182               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    183               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF88D 0x0002      STRB     R0,[SP, #+2]
    184               NVIC_Init(&NVIC_InitStructure);
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x.... 0x....      BL       NVIC_Init
    185          
    186               NVIC_InitStructure.NVIC_IRQChannel = EXTI_Prox_Right_IRQn;
   \   0000003A   0x200A             MOVS     R0,#+10
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    187               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF88D 0x0001      STRB     R0,[SP, #+1]
    188               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0002      STRB     R0,[SP, #+2]
    189               NVIC_Init(&NVIC_InitStructure);
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       NVIC_Init
    190               
    191               NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
   \   00000052   0x2025             MOVS     R0,#+37
   \   00000054   0xF88D 0x0000      STRB     R0,[SP, #+0]
    192               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    193               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF88D 0x0002      STRB     R0,[SP, #+2]
    194               NVIC_Init(&NVIC_InitStructure);
   \   00000064   0x4668             MOV      R0,SP
   \   00000066   0x.... 0x....      BL       NVIC_Init
    195               
    196               NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   0000006A   0x2026             MOVS     R0,#+38
   \   0000006C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    197               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
   \   00000070   0x2002             MOVS     R0,#+2
   \   00000072   0xF88D 0x0001      STRB     R0,[SP, #+1]
    198               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0xF88D 0x0002      STRB     R0,[SP, #+2]
    199               NVIC_Init(&NVIC_InitStructure);
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x.... 0x....      BL       NVIC_Init
    200           }
   \   00000082   0xBD01             POP      {R0,PC}          ;; return
    201          

   \                                 In section .text, align 2, keep-with-next
    202           void PWM_Configuration(void)
    203           {
   \                     PWM_Configuration: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    204               uint16_t prescale = (uint16_t) (SystemCoreClock / 10000);  
   \   00000002   0x....             LDR.N    R0,??DataTable9_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF242 0x7110      MOVW     R1,#+10000
   \   0000000A   0xFBB0 0xF4F1      UDIV     R4,R0,R1
    205               
    206               TIM_TimeBaseStructure.TIM_Period = ONE_TICK;
   \   0000000E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000012   0x....             LDR.N    R1,??DataTable9_9
   \   00000014   0x8088             STRH     R0,[R1, #+4]
    207               TIM_TimeBaseStructure.TIM_Prescaler = prescale;
   \   00000016   0x....             LDR.N    R0,??DataTable9_9
   \   00000018   0x8004             STRH     R4,[R0, #+0]
    208               TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR.N    R1,??DataTable9_9
   \   0000001E   0x80C8             STRH     R0,[R1, #+6]
    209               TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \   00000020   0x2010             MOVS     R0,#+16
   \   00000022   0x....             LDR.N    R1,??DataTable9_9
   \   00000024   0x8048             STRH     R0,[R1, #+2]
    210               TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \   00000026   0x....             LDR.N    R1,??DataTable9_9
   \   00000028   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000002C   0x.... 0x....      BL       TIM_TimeBaseInit
    211               TIM_ARRPreloadConfig(TIM2, ENABLE);
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000036   0x.... 0x....      BL       TIM_ARRPreloadConfig
    212               TIM_Cmd(TIM2, ENABLE);
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000040   0x.... 0x....      BL       TIM_Cmd
    213               
    214               TIM_TimeBaseStructure.TIM_Period = 20000;
   \   00000044   0xF644 0x6020      MOVW     R0,#+20000
   \   00000048   0x....             LDR.N    R1,??DataTable9_9
   \   0000004A   0x8088             STRH     R0,[R1, #+4]
    215               TIM_TimeBaseStructure.TIM_Prescaler = prescale;
   \   0000004C   0x....             LDR.N    R0,??DataTable9_9
   \   0000004E   0x8004             STRH     R4,[R0, #+0]
    216               TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable9_9
   \   00000054   0x80C8             STRH     R0,[R1, #+6]
    217               TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \   00000056   0x2010             MOVS     R0,#+16
   \   00000058   0x....             LDR.N    R1,??DataTable9_9
   \   0000005A   0x8048             STRH     R0,[R1, #+2]
    218            
    219               TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   0000005C   0x2060             MOVS     R0,#+96
   \   0000005E   0x....             LDR.N    R1,??DataTable9_10
   \   00000060   0x8008             STRH     R0,[R1, #+0]
    220               TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable9_10
   \   00000066   0x8108             STRH     R0,[R1, #+8]
    221               TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x....             LDR.N    R1,??DataTable9_10
   \   0000006C   0x8048             STRH     R0,[R1, #+2]
    222               TIM_OCInitStructure.TIM_Pulse = 1500; // us
   \   0000006E   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000072   0x....             LDR.N    R1,??DataTable9_10
   \   00000074   0x80C8             STRH     R0,[R1, #+6]
    223               TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \   00000076   0x....             LDR.N    R1,??DataTable9_10
   \   00000078   0x....             LDR.N    R0,??DataTable9_11  ;; 0x40000400
   \   0000007A   0x.... 0x....      BL       TIM_OC3Init
    224               TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
   \   0000007E   0x....             LDR.N    R1,??DataTable9_9
   \   00000080   0x....             LDR.N    R0,??DataTable9_11  ;; 0x40000400
   \   00000082   0x.... 0x....      BL       TIM_TimeBaseInit
    225               TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x....             LDR.N    R0,??DataTable9_11  ;; 0x40000400
   \   0000008A   0x.... 0x....      BL       TIM_OC3PreloadConfig
    226               TIM_ARRPreloadConfig(TIM3, ENABLE);
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x....             LDR.N    R0,??DataTable9_11  ;; 0x40000400
   \   00000092   0x.... 0x....      BL       TIM_ARRPreloadConfig
    227               TIM_Cmd(TIM3, ENABLE);
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x....             LDR.N    R0,??DataTable9_11  ;; 0x40000400
   \   0000009A   0x.... 0x....      BL       TIM_Cmd
    228           }
   \   0000009E   0xBD10             POP      {R4,PC}          ;; return
    229          

   \                                 In section .text, align 2, keep-with-next
    230           void TIM2_IRQHandler(void)
    231           {
   \                     TIM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    232               if(TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000008   0x.... 0x....      BL       TIM_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00C             BEQ.N    ??TIM2_IRQHandler_0
    233               { 
    234                   STOP();
   \   00000010   0x.... 0x....      BL       STOP
    235                   TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000001C   0x.... 0x....      BL       TIM_ITConfig
    236          
    237                   TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000026   0x.... 0x....      BL       TIM_ClearITPendingBit
    238               }
    239           }
   \                     ??TIM2_IRQHandler_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    240          
    241          
    242          // Front

   \                                 In section .text, align 2, keep-with-next
    243           void EXTI3_IRQHandler(void)
    244          {
   \                     EXTI3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    245            STOP();
   \   00000002   0x.... 0x....      BL       STOP
    246               if(EXTI_GetITStatus(EXTI_Prox_Front_Line) != RESET)
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       EXTI_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD102             BNE.N    ??EXTI3_IRQHandler_0
   \   00000010   0xE00A             B.N      ??EXTI3_IRQHandler_1
    247               {
    248                 while(GPIO_ReadInputDataBit(GPIO_Prox_Front_Port, GPIO_Prox_Front_Pin) == 0) {
    249                    ONE_TICK_CLOCKWISE_ROTATION();
   \                     ??EXTI3_IRQHandler_2: (+1)
   \   00000012   0x.... 0x....      BL       ONE_TICK_CLOCKWISE_ROTATION
    250                 }
   \                     ??EXTI3_IRQHandler_0: (+1)
   \   00000016   0x2108             MOVS     R1,#+8
   \   00000018   0x....             LDR.N    R0,??DataTable9_4  ;; 0x40011000
   \   0000001A   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD0F7             BEQ.N    ??EXTI3_IRQHandler_2
    251                   
    252          
    253                   EXTI_ClearITPendingBit(EXTI_Prox_Front_Line);
   \   00000022   0x2008             MOVS     R0,#+8
   \   00000024   0x.... 0x....      BL       EXTI_ClearITPendingBit
    254               }
    255          }
   \                     ??EXTI3_IRQHandler_1: (+1)
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    256          
    257          // Right

   \                                 In section .text, align 2, keep-with-next
    258          void EXTI4_IRQHandler(void)
    259          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    260              STOP();
   \   00000002   0x.... 0x....      BL       STOP
    261               if(EXTI_GetITStatus(EXTI_Prox_Right_Line) != RESET)
   \   00000006   0x2010             MOVS     R0,#+16
   \   00000008   0x.... 0x....      BL       EXTI_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD102             BNE.N    ??EXTI4_IRQHandler_0
   \   00000010   0xE00A             B.N      ??EXTI4_IRQHandler_1
    262               {
    263                 while(GPIO_ReadInputDataBit(GPIO_Prox_Right_Port, GPIO_Prox_Right_Pin) == 0) {
    264                    ONE_TICK_COUNTER_CLOCKWISE_ROTATION();
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000012   0x.... 0x....      BL       ONE_TICK_COUNTER_CLOCKWISE_ROTATION
    265                 }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x....             LDR.N    R0,??DataTable9_4  ;; 0x40011000
   \   0000001A   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD0F7             BEQ.N    ??EXTI4_IRQHandler_2
    266          
    267                   EXTI_ClearITPendingBit(EXTI_Prox_Right_Line);
   \   00000022   0x2010             MOVS     R0,#+16
   \   00000024   0x.... 0x....      BL       EXTI_ClearITPendingBit
    268               }
    269          }
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    270          

   \                                 In section .text, align 2, keep-with-next
    271          void USART1_IRQHandler() {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    272              uint16_t word;
    273              if(USART_GetITStatus(USART1,USART_IT_RXNE)!=RESET){
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013800
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00C             BEQ.N    ??USART1_IRQHandler_0
    274                  // the most recent received data by the USART2 peripheral
    275                   word = USART_ReceiveData(USART1);
   \   00000010   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013800
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
   \   00000016   0x0001             MOVS     R1,R0
    276          
    277                   USART_SendData(USART2, word);
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40004400
   \   0000001C   0x.... 0x....      BL       USART_SendData
    278                   
    279          
    280                   // clear 'Read data register not empty' flag
    281                  USART_ClearITPendingBit(USART1,USART_IT_RXNE);
   \   00000020   0xF240 0x5125      MOVW     R1,#+1317
   \   00000024   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013800
   \   00000026   0x.... 0x....      BL       USART_ClearITPendingBit
    282               }
    283          }
   \                     ??USART1_IRQHandler_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    284          

   \                                 In section .text, align 2, keep-with-next
    285          void USART2_IRQHandler() {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    286            uint16_t word;
    287              if(USART_GetITStatus(USART2,USART_IT_RXNE)!=RESET){
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40004400
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD01B             BEQ.N    ??USART2_IRQHandler_0
    288                  // the most recent received data by the USART2 peripheral
    289                   word = USART_ReceiveData(USART2);
   \   00000010   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40004400
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
   \   00000016   0x0004             MOVS     R4,R0
    290          
    291                   switch (word - '0')
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x3830             SUBS     R0,R0,#+48
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD002             BEQ.N    ??USART2_IRQHandler_1
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD003             BEQ.N    ??USART2_IRQHandler_2
   \   00000026   0xE005             B.N      ??USART2_IRQHandler_3
    292                   {
    293                   case 0:
    294                     COUNTER_CLOCKWISE_ROTATION();
   \                     ??USART2_IRQHandler_1: (+1)
   \   00000028   0x.... 0x....      BL       COUNTER_CLOCKWISE_ROTATION
    295                     break;
   \   0000002C   0xE002             B.N      ??USART2_IRQHandler_4
    296                   case 1:
    297                     CLOCKWISE_ROTATION();
   \                     ??USART2_IRQHandler_2: (+1)
   \   0000002E   0x.... 0x....      BL       CLOCKWISE_ROTATION
    298                     break;
   \   00000032   0xE7FF             B.N      ??USART2_IRQHandler_4
    299                  
    300                   default:
    301                     break;
    302                   }
    303          
    304                   USART_SendData(USART1, word);
   \                     ??USART2_IRQHandler_3: (+1)
   \                     ??USART2_IRQHandler_4: (+1)
   \   00000034   0x0021             MOVS     R1,R4
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013800
   \   0000003A   0x.... 0x....      BL       USART_SendData
    305                
    306          
    307                   // clear 'Read data register not empty' flag
    308                  USART_ClearITPendingBit(USART2,USART_IT_RXNE);
   \   0000003E   0xF240 0x5125      MOVW     R1,#+1317
   \   00000042   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40004400
   \   00000044   0x.... 0x....      BL       USART_ClearITPendingBit
    309               }
    310          }
   \                     ??USART2_IRQHandler_0: (+1)
   \   00000048   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     Right_Interrupt_Status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     EXTI_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x40011800         DC32     0x40011800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     TIM_TimeBaseStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     TIM_OCInitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x40000400         DC32     0x40000400

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EXTI3_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> GPIO_ReadInputDataBit
         8   -> ONE_TICK_CLOCKWISE_ROTATION
         8   -> STOP
       8   EXTI4_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> GPIO_ReadInputDataBit
         8   -> ONE_TICK_COUNTER_CLOCKWISE_ROTATION
         8   -> STOP
       8   EXTI_Configure
         8   -> EXTI_Init
         8   -> GPIO_EXTILineConfig
       8   GPIO_Configuration
         8   -> GPIO_Init
       8   NVIC_Configuration
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
       8   PWM_Configuration
         8   -> TIM_ARRPreloadConfig
         8   -> TIM_Cmd
         8   -> TIM_OC3Init
         8   -> TIM_OC3PreloadConfig
         8   -> TIM_TimeBaseInit
       8   RCC_Configuration
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
       8   Right_Interrupt_Disable
         8   -> EXTI_Init
       8   Right_Interrupt_Enable
         8   -> EXTI_Init
       8   TIM2_IRQHandler
         8   -> STOP
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
         8   -> TIM_ITConfig
      40   USART12_Init
        40   -> USART_Cmd
        40   -> USART_ITConfig
        40   -> USART_Init
       8   USART1_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> USART_SendData
       8   USART2_IRQHandler
         8   -> CLOCKWISE_ROTATION
         8   -> COUNTER_CLOCKWISE_ROTATION
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> USART_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       4  Current_Time
      42  EXTI3_IRQHandler
      42  EXTI4_IRQHandler
      86  EXTI_Configure
       8  EXTI_InitStructure
     242  GPIO_Configuration
     132  NVIC_Configuration
     160  PWM_Configuration
       4  Previous_Time
      90  RCC_Configuration
      28  Right_Interrupt_Disable
      28  Right_Interrupt_Enable
       2  Right_Interrupt_Status
      44  TIM2_IRQHandler
      16  TIM_OCInitStructure
      12  TIM_TimeBaseStructure
     136  USART12_Init
      44  USART1_IRQHandler
      74  USART2_IRQHandler

 
    46 bytes in section .bss
 1 196 bytes in section .text
 
 1 196 bytes of CODE memory
    46 bytes of DATA memory

Errors: none
Warnings: 2
