###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         22/Dec/2023  05:46:08
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\configuration.c
#    Command line      =
#        -f
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER\configuration.o.rsp
#        (c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\configuration.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\List\libraries\USER
#        -o
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\CMSIS\DeviceSupport\
#        -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\LCD\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\user\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\user\inc\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\ -Ol -I
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER\configuration.o.d
#    Locale            =  C
#    List file         =
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\List\libraries\USER\configuration.lst
#    Object file       =
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER\configuration.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\configuration.c
      1          #include "configuration.h"
      2          

   \                                 In section .bss, align 4
      3          int isDark = 0;
   \                     isDark:
   \        0x0                      DS8 4
      4          

   \                                 In section .bss, align 4
      5          int isInturrupted = 0;
   \                     isInturrupted:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
      6          int isClockWise = 0;
   \                     isClockWise:
   \        0x0                      DS8 4
      7          

   \                                 In section .bss, align 2
      8          uint16_t Right_Interrupt_Status;
   \                     Right_Interrupt_Status:
   \        0x0                      DS8 2
      9          

   \                                 In section .bss, align 4
     10          EXTI_InitTypeDef EXTI_InitStructure;
   \                     EXTI_InitStructure:
   \        0x0                      DS8 8
     11          

   \                                 In section .bss, align 4
     12          TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
   \                     TIM_TimeBaseStructure:
   \        0x0                      DS8 12

   \                                 In section .bss, align 4
     13          TIM_OCInitTypeDef TIM_OCInitStructure;
   \                     TIM_OCInitStructure:
   \        0x0                      DS8 16
     14          

   \                                 In section .data, align 4
     15          int dir[4][2] = {{FORWARD_TICK, 0}, {0, FORWARD_TICK}, {-FORWARD_TICK, 0}, {0, -FORWARD_TICK}};
   \                     dir:
   \        0x0   0x0000'0064        DC32 100, 0, 0, 100, -100, 0, 0, -100

   \              0x0000'0000  

   \              0x0000'0000  

   \              0x0000'0064  

   \              0xFFFF'FF9C  

   \              0x0000'0000  

   \              0x0000'0000  

   \              0xFFFF'FF9C

   \                                 In section .bss, align 4
     16          int dir_Idx = 0;
   \                     dir_Idx:
   \        0x0                      DS8 4
     17          

   \                                 In section .bss, align 4
     18          Point inner_Map[100];
   \                     inner_Map:
   \        0x0                      DS8 800

   \                                 In section .bss, align 4
     19          int inner_Map_Idx = 0;
   \                     inner_Map_Idx:
   \        0x0                      DS8 4
     20          
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void Right_Interrupt_Enable(void) {
   \                     Right_Interrupt_Enable: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     23            Right_Interrupt_Status = 1;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x.... 0x....      LDR.W    R1,??DataTable12
   \        0x8   0x8008             STRH     R0,[R1, #+0]
     24            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \        0xE   0x2101             MOVS     R1,#+1
   \       0x10   0x7181             STRB     R1,[R0, #+6]
     25            EXTI_Init(&EXTI_InitStructure);
   \       0x12   0x.... 0x....      BL       EXTI_Init
     26          }
   \       0x16   0xBD01             POP      {R0,PC}
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void Right_Interrupt_Disable(void) {
   \                     Right_Interrupt_Disable: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     29            Right_Interrupt_Status = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x.... 0x....      LDR.W    R1,??DataTable12
   \        0x8   0x8008             STRH     R0,[R1, #+0]
     30            EXTI_InitStructure.EXTI_LineCmd = DISABLE;
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x7181             STRB     R1,[R0, #+6]
     31            EXTI_Init(&EXTI_InitStructure);
   \       0x12   0x.... 0x....      BL       EXTI_Init
     32          }
   \       0x16   0xBD01             POP      {R0,PC}
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void EXTI_Cmd(uint32_t EXTI_Line, FunctionalState command) {
   \                     EXTI_Cmd: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     35            EXTI_InitStructure.EXTI_Line = EXTI_Line;
   \        0x2   0x.... 0x....      LDR.W    R2,??DataTable12_1
   \        0x6   0x6010             STR      R0,[R2, #+0]
     36            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x7110             STRB     R0,[R2, #+4]
     37            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \        0xC   0x200C             MOVS     R0,#+12
   \        0xE   0x7150             STRB     R0,[R2, #+5]
     38            EXTI_InitStructure.EXTI_LineCmd = command;
   \       0x10   0x7191             STRB     R1,[R2, #+6]
     39            EXTI_Init(&EXTI_InitStructure);
   \       0x12   0x0010             MOVS     R0,R2
   \       0x14   0x.... 0x....      BL       EXTI_Init
     40          }
   \       0x18   0xBD01             POP      {R0,PC}
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void RCC_Configuration(void) {
   \                     RCC_Configuration: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     43            RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0xF44F 0x7000      MOV      R0,#+512
   \        0x8   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     44            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0x2004             MOVS     R0,#+4
   \       0x10   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     45            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \       0x14   0x2101             MOVS     R1,#+1
   \       0x16   0x2010             MOVS     R0,#+16
   \       0x18   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     46            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x2020             MOVS     R0,#+32
   \       0x20   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     47            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
   \       0x24   0x2101             MOVS     R1,#+1
   \       0x26   0x2040             MOVS     R0,#+64
   \       0x28   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     48            RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \       0x2C   0x2101             MOVS     R1,#+1
   \       0x2E   0xF44F 0x4080      MOV      R0,#+16384
   \       0x32   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     49            RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \       0x36   0x2101             MOVS     R1,#+1
   \       0x38   0xF45F 0x3000      MOVS     R0,#+131072
   \       0x3C   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     50            RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \       0x40   0x2101             MOVS     R1,#+1
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     51          
     52            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \       0x48   0x2101             MOVS     R1,#+1
   \       0x4A   0x2001             MOVS     R0,#+1
   \       0x4C   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     53            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \       0x50   0x2101             MOVS     R1,#+1
   \       0x52   0x2002             MOVS     R0,#+2
   \       0x54   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     54            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \       0x58   0x2101             MOVS     R1,#+1
   \       0x5A   0x2004             MOVS     R0,#+4
   \       0x5C   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     55          }
   \       0x60   0xBD01             POP      {R0,PC}
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void GPIO_Configuration(void) {
   \                     GPIO_Configuration: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     58            GPIO_InitTypeDef GPIO_InitStructure;
     59            /* motor driver setting */
     60            GPIO_InitStructure.GPIO_Pin = GPIO_Motor_In1_Pin | GPIO_Motor_In2_Pin;
   \        0x2   0x200C             MOVS     R0,#+12
   \        0x4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     61            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \        0x8   0x2010             MOVS     R0,#+16
   \        0xA   0xF88D 0x0003      STRB     R0,[SP, #+3]
     62            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0xE   0x2003             MOVS     R0,#+3
   \       0x10   0xF88D 0x0002      STRB     R0,[SP, #+2]
     63          
     64            GPIO_Init(GPIO_Left_Motor_Port, &GPIO_InitStructure);
   \       0x14   0x.... 0x....      LDR.W    R4,??DataTable12_2
   \       0x18   0x4669             MOV      R1,SP
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       GPIO_Init
     65          
     66            GPIO_InitStructure.GPIO_Pin = GPIO_Motor_In3_Pin | GPIO_Motor_In4_Pin;
   \       0x20   0x2030             MOVS     R0,#+48
   \       0x22   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     67            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \       0x26   0x2010             MOVS     R0,#+16
   \       0x28   0xF88D 0x0003      STRB     R0,[SP, #+3]
     68            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x2C   0x2003             MOVS     R0,#+3
   \       0x2E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     69            GPIO_Init(GPIO_Right_Motor_Port, &GPIO_InitStructure);
   \       0x32   0x4669             MOV      R1,SP
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       GPIO_Init
     70          
     71            /* USART1 pin setting (USART1 Port)*/
     72          
     73            
     74            // TX
     75            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \       0x3A   0xF44F 0x7000      MOV      R0,#+512
   \       0x3E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     76            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x42   0x2003             MOVS     R0,#+3
   \       0x44   0xF88D 0x0002      STRB     R0,[SP, #+2]
     77            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x48   0x2018             MOVS     R0,#+24
   \       0x4A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     78            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x4E   0x.... 0x....      LDR.W    R5,??DataTable12_3
   \       0x52   0x4669             MOV      R1,SP
   \       0x54   0x0028             MOVS     R0,R5
   \       0x56   0x.... 0x....      BL       GPIO_Init
     79            // RX
     80            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   \       0x5A   0xF44F 0x6080      MOV      R0,#+1024
   \       0x5E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     81            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU | GPIO_Mode_IPD;
                                                ^
Warning[Pe188]: enumerated type mixed with another type
   \       0x62   0x2068             MOVS     R0,#+104
   \       0x64   0xF88D 0x0003      STRB     R0,[SP, #+3]
     82            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x68   0x4669             MOV      R1,SP
   \       0x6A   0x0028             MOVS     R0,R5
   \       0x6C   0x.... 0x....      BL       GPIO_Init
     83            
     84          
     85            /* USART2 pin setting (BLE)*/
     86            // TX
     87            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \       0x70   0x2004             MOVS     R0,#+4
   \       0x72   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     88            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x76   0x2003             MOVS     R0,#+3
   \       0x78   0xF88D 0x0002      STRB     R0,[SP, #+2]
     89            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x7C   0x2018             MOVS     R0,#+24
   \       0x7E   0xF88D 0x0003      STRB     R0,[SP, #+3]
     90            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x82   0x4669             MOV      R1,SP
   \       0x84   0x0028             MOVS     R0,R5
   \       0x86   0x.... 0x....      BL       GPIO_Init
     91            // RX
     92            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \       0x8A   0x2008             MOVS     R0,#+8
   \       0x8C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     93            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU | GPIO_Mode_IPD;
                                                ^
Warning[Pe188]: enumerated type mixed with another type
   \       0x90   0x2068             MOVS     R0,#+104
   \       0x92   0xF88D 0x0003      STRB     R0,[SP, #+3]
     94            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x96   0x4669             MOV      R1,SP
   \       0x98   0x0028             MOVS     R0,R5
   \       0x9A   0x.... 0x....      BL       GPIO_Init
     95          
     96            //     /* jodo sensor setting */
     97            GPIO_InitStructure.GPIO_Pin = GPIO_Illumination_Pin;
   \       0x9E   0x2004             MOVS     R0,#+4
   \       0xA0   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     98            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \       0xA4   0x2000             MOVS     R0,#+0
   \       0xA6   0xF88D 0x0003      STRB     R0,[SP, #+3]
     99            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0xAA   0x2003             MOVS     R0,#+3
   \       0xAC   0xF88D 0x0002      STRB     R0,[SP, #+2]
    100            GPIO_Init(GPIO_Illumination_Port, &GPIO_InitStructure);
   \       0xB0   0x.... 0x....      LDR.W    R5,??DataTable12_4
   \       0xB4   0x4669             MOV      R1,SP
   \       0xB6   0x0028             MOVS     R0,R5
   \       0xB8   0x.... 0x....      BL       GPIO_Init
    101          
    102            /* 근접 센서 setting */
    103            GPIO_InitStructure.GPIO_Pin =
    104                GPIO_Prox_Front_Pin1 | GPIO_Prox_Front_Pin2;
   \       0xBC   0xF44F 0x7040      MOV      R0,#+768
   \       0xC0   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    105            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   \       0xC4   0x2028             MOVS     R0,#+40
   \       0xC6   0xF88D 0x0003      STRB     R0,[SP, #+3]
    106            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0xCA   0x2003             MOVS     R0,#+3
   \       0xCC   0xF88D 0x0002      STRB     R0,[SP, #+2]
    107            GPIO_Init(GPIO_Prox_Front_Port1, &GPIO_InitStructure);
   \       0xD0   0x4669             MOV      R1,SP
   \       0xD2   0x0020             MOVS     R0,R4
   \       0xD4   0x.... 0x....      BL       GPIO_Init
    108          
    109            /*
    110            GPIO_InitStructure.GPIO_Pin = GPIO_Prox_Front_Pin | GPIO_Prox_Right_Pin;
    111            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    112            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    113            GPIO_Init(GPIOD, &GPIO_InitStructure);
    114          */
    115          
    116            GPIO_InitStructure.GPIO_Pin = GPIO_Illumination_Pin;
   \       0xD8   0x2004             MOVS     R0,#+4
   \       0xDA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    117            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   \       0xDE   0x2028             MOVS     R0,#+40
   \       0xE0   0xF88D 0x0003      STRB     R0,[SP, #+3]
    118            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0xE4   0x2003             MOVS     R0,#+3
   \       0xE6   0xF88D 0x0002      STRB     R0,[SP, #+2]
    119            GPIO_Init(GPIO_Illumination_Port, &GPIO_InitStructure);
   \       0xEA   0x4669             MOV      R1,SP
   \       0xEC   0x0028             MOVS     R0,R5
   \       0xEE   0x.... 0x....      BL       GPIO_Init
    120          
    121            // Debuggin LED
    122            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
   \       0xF2   0x2080             MOVS     R0,#+128
   \       0xF4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    123            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \       0xF8   0x2010             MOVS     R0,#+16
   \       0xFA   0xF88D 0x0003      STRB     R0,[SP, #+3]
    124            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0xFE   0x2003             MOVS     R0,#+3
   \      0x100   0xF88D 0x0002      STRB     R0,[SP, #+2]
    125            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \      0x104   0x4669             MOV      R1,SP
   \      0x106   0x0028             MOVS     R0,R5
   \      0x108   0x.... 0x....      BL       GPIO_Init
    126          }
   \      0x10C   0xBD31             POP      {R0,R4,R5,PC}
    127          

   \                                 In section .text, align 2, keep-with-next
    128          void EXTI_Configure(void) {
   \                     EXTI_Configure: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    129            GPIO_EXTILineConfig(GPIO_Prox_Front_PortSource1, GPIO_Prox_Front_PinSource1);
   \        0x2   0x2108             MOVS     R1,#+8
   \        0x4   0x2004             MOVS     R0,#+4
   \        0x6   0x.... 0x....      BL       GPIO_EXTILineConfig
    130            EXTI_InitStructure.EXTI_Line = EXTI_Prox_Front_Line1;
   \        0xA   0x.... 0x....      LDR.W    R4,??DataTable12_1
   \        0xE   0xF44F 0x7080      MOV      R0,#+256
   \       0x12   0x6020             STR      R0,[R4, #+0]
    131            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x7120             STRB     R0,[R4, #+4]
    132            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \       0x18   0x200C             MOVS     R0,#+12
   \       0x1A   0x7160             STRB     R0,[R4, #+5]
    133            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x71A0             STRB     R0,[R4, #+6]
    134            EXTI_Init(&EXTI_InitStructure);
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       EXTI_Init
    135          
    136            GPIO_EXTILineConfig(GPIO_Prox_Front_PortSource2, GPIO_Prox_Front_PinSource2);
   \       0x26   0x2109             MOVS     R1,#+9
   \       0x28   0x2004             MOVS     R0,#+4
   \       0x2A   0x.... 0x....      BL       GPIO_EXTILineConfig
    137            EXTI_InitStructure.EXTI_Line = EXTI_Prox_Front_Line2;
   \       0x2E   0xF44F 0x7000      MOV      R0,#+512
   \       0x32   0x6020             STR      R0,[R4, #+0]
    138            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0x7120             STRB     R0,[R4, #+4]
    139            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \       0x38   0x200C             MOVS     R0,#+12
   \       0x3A   0x7160             STRB     R0,[R4, #+5]
    140            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0x71A0             STRB     R0,[R4, #+6]
    141            EXTI_Init(&EXTI_InitStructure);
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       EXTI_Init
    142          
    143          /*
    144            GPIO_EXTILineConfig(GPIO_Prox_Right_PortSource1, GPIO_Prox_Right_PinSource1);
    145            EXTI_InitStructure.EXTI_Line = EXTI_Prox_Right_Line1;
    146            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    147            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    148            EXTI_InitStructure.EXTI_LineCmd = DISABLE;
    149            EXTI_Init(&EXTI_InitStructure);
    150          
    151            GPIO_EXTILineConfig(GPIO_Prox_Right_PortSource2, GPIO_Prox_Right_PinSource2);
    152            EXTI_InitStructure.EXTI_Line = EXTI_Prox_Right_Line2;
    153            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    154            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    155            EXTI_InitStructure.EXTI_LineCmd = DISABLE;
    156            EXTI_Init(&EXTI_InitStructure);
    157          */
    158          
    159            GPIO_EXTILineConfig(GPIO_Illumination_PortSource, GPIO_Illumination_PinSource);
   \       0x46   0x2102             MOVS     R1,#+2
   \       0x48   0x2003             MOVS     R0,#+3
   \       0x4A   0x.... 0x....      BL       GPIO_EXTILineConfig
    160            EXTI_InitStructure.EXTI_Line = EXTI_Illumination_Line;
   \       0x4E   0x2004             MOVS     R0,#+4
   \       0x50   0x6020             STR      R0,[R4, #+0]
    161            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x7120             STRB     R0,[R4, #+4]
    162            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
   \       0x56   0x2010             MOVS     R0,#+16
   \       0x58   0x7160             STRB     R0,[R4, #+5]
    163            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \       0x5A   0x2001             MOVS     R0,#+1
   \       0x5C   0x71A0             STRB     R0,[R4, #+6]
    164            EXTI_Init(&EXTI_InitStructure);
   \       0x5E   0x0020             MOVS     R0,R4
   \       0x60   0x.... 0x....      BL       EXTI_Init
    165          
    166            Right_Interrupt_Status = 0;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0x.... 0x....      LDR.W    R1,??DataTable12
   \       0x6A   0x8008             STRH     R0,[R1, #+0]
    167          }
   \       0x6C   0xBD10             POP      {R4,PC}
    168          

   \                                 In section .text, align 2, keep-with-next
    169          void USART12_Init(void) {
   \                     USART12_Init: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
    170            USART_InitTypeDef USART1_InitStructure;
    171            USART_InitTypeDef USART2_InitStructure;
    172          
    173          
    174            USART_Cmd(USART1, ENABLE);
   \        0x4   0x.... 0x....      LDR.W    R5,??DataTable12_5
   \        0x8   0x2101             MOVS     R1,#+1
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       USART_Cmd
    175          
    176            USART1_InitStructure.USART_BaudRate = 9600;
   \       0x10   0xF44F 0x5616      MOV      R6,#+9600
   \       0x14   0x9604             STR      R6,[SP, #+16]
    177            USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    178            USART1_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \       0x1C   0x200C             MOVS     R0,#+12
   \       0x1E   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    179            USART1_InitStructure.USART_Parity = USART_Parity_No;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    180            USART1_InitStructure.USART_StopBits = USART_StopBits_1;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    181            USART1_InitStructure.USART_WordLength = USART_WordLength_8b;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    182          
    183            USART_Init(USART1, &USART1_InitStructure);
   \       0x34   0xA904             ADD      R1,SP,#+16
   \       0x36   0x0028             MOVS     R0,R5
   \       0x38   0x.... 0x....      BL       USART_Init
    184            USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \       0x3C   0xF240 0x5425      MOVW     R4,#+1317
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0x0021             MOVS     R1,R4
   \       0x44   0x0028             MOVS     R0,R5
   \       0x46   0x.... 0x....      BL       USART_ITConfig
    185          
    186          
    187            USART_Cmd(USART2, ENABLE);
   \       0x4A   0x....             LDR.N    R5,??DataTable12_6
   \       0x4C   0x2101             MOVS     R1,#+1
   \       0x4E   0x0028             MOVS     R0,R5
   \       0x50   0x.... 0x....      BL       USART_Cmd
    188          
    189            USART2_InitStructure.USART_BaudRate = 9600;
   \       0x54   0x9600             STR      R6,[SP, #+0]
    190            USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    191            USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \       0x5C   0x200C             MOVS     R0,#+12
   \       0x5E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    192            USART2_InitStructure.USART_Parity = USART_Parity_No;
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    193            USART2_InitStructure.USART_StopBits = USART_StopBits_1;
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    194            USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    195          
    196            USART_Init(USART2, &USART2_InitStructure);
   \       0x74   0x4669             MOV      R1,SP
   \       0x76   0x0028             MOVS     R0,R5
   \       0x78   0x.... 0x....      BL       USART_Init
    197            USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \       0x7C   0x2201             MOVS     R2,#+1
   \       0x7E   0x0021             MOVS     R1,R4
   \       0x80   0x0028             MOVS     R0,R5
   \       0x82   0x.... 0x....      BL       USART_ITConfig
    198          }
   \       0x86   0xB008             ADD      SP,SP,#+32
   \       0x88   0xBD70             POP      {R4-R6,PC}
    199          

   \                                 In section .text, align 2, keep-with-next
    200          void NVIC_Configuration(void) {
   \                     NVIC_Configuration: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    201            NVIC_InitTypeDef NVIC_InitStructure;
    202            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \        0x2   0xF44F 0x60A0      MOV      R0,#+1280
   \        0x6   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    203          
    204            // Timer for Rotating
    205            NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
   \        0xA   0x201C             MOVS     R0,#+28
   \        0xC   0xF88D 0x0000      STRB     R0,[SP, #+0]
    206            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xF88D 0x0001      STRB     R0,[SP, #+1]
    207            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF88D 0x0002      STRB     R0,[SP, #+2]
    208            NVIC_Init(&NVIC_InitStructure);
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x.... 0x....      BL       NVIC_Init
    209          
    210            // Timer for Forwarding
    211            NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
   \       0x22   0x201E             MOVS     R0,#+30
   \       0x24   0xF88D 0x0000      STRB     R0,[SP, #+0]
    212            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
   \       0x28   0x2001             MOVS     R0,#+1
   \       0x2A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    213            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0xF88D 0x0002      STRB     R0,[SP, #+2]
    214            NVIC_Init(&NVIC_InitStructure);
   \       0x34   0x4668             MOV      R0,SP
   \       0x36   0x.... 0x....      BL       NVIC_Init
    215          
    216            /* Prox sensor setting */
    217          
    218            NVIC_InitStructure.NVIC_IRQChannel = EXTI_Prox_Front_IRQn;
   \       0x3A   0x2017             MOVS     R0,#+23
   \       0x3C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    219            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
   \       0x40   0x2001             MOVS     R0,#+1
   \       0x42   0xF88D 0x0001      STRB     R0,[SP, #+1]
    220            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xF88D 0x0002      STRB     R0,[SP, #+2]
    221            NVIC_Init(&NVIC_InitStructure);
   \       0x4C   0x4668             MOV      R0,SP
   \       0x4E   0x.... 0x....      BL       NVIC_Init
    222          
    223          /*
    224            NVIC_InitStructure.NVIC_IRQChannel = EXTI_Prox_Right_IRQn;
    225            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    226            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    227            NVIC_Init(&NVIC_InitStructure);
    228          */
    229          
    230            NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
   \       0x52   0x2025             MOVS     R0,#+37
   \       0x54   0xF88D 0x0000      STRB     R0,[SP, #+0]
    231            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
   \       0x58   0x2002             MOVS     R0,#+2
   \       0x5A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    232            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0xF88D 0x0002      STRB     R0,[SP, #+2]
    233            NVIC_Init(&NVIC_InitStructure);
   \       0x64   0x4668             MOV      R0,SP
   \       0x66   0x.... 0x....      BL       NVIC_Init
    234          
    235          
    236            NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \       0x6A   0x2026             MOVS     R0,#+38
   \       0x6C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    237            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
   \       0x70   0x2002             MOVS     R0,#+2
   \       0x72   0xF88D 0x0001      STRB     R0,[SP, #+1]
    238            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \       0x76   0x2000             MOVS     R0,#+0
   \       0x78   0xF88D 0x0002      STRB     R0,[SP, #+2]
    239            NVIC_Init(&NVIC_InitStructure);
   \       0x7C   0x4668             MOV      R0,SP
   \       0x7E   0x.... 0x....      BL       NVIC_Init
    240          
    241            NVIC_InitStructure.NVIC_IRQChannel = EXTI_Illumination_IRQn;
   \       0x82   0x2008             MOVS     R0,#+8
   \       0x84   0xF88D 0x0000      STRB     R0,[SP, #+0]
    242            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
   \       0x88   0x2003             MOVS     R0,#+3
   \       0x8A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    243            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \       0x8E   0x2000             MOVS     R0,#+0
   \       0x90   0xF88D 0x0002      STRB     R0,[SP, #+2]
    244            NVIC_Init(&NVIC_InitStructure);
   \       0x94   0x4668             MOV      R0,SP
   \       0x96   0x.... 0x....      BL       NVIC_Init
    245          
    246            TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
   \       0x9A   0x2201             MOVS     R2,#+1
   \       0x9C   0x2101             MOVS     R1,#+1
   \       0x9E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xA2   0x.... 0x....      BL       TIM_ITConfig
    247           // TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
    248          }
   \       0xA6   0xBD01             POP      {R0,PC}
    249          

   \                                 In section .text, align 2, keep-with-next
    250          void PWM_Configuration(void) {
   \                     PWM_Configuration: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    251            uint16_t prescale = (uint16_t)(SystemCoreClock / 10000);
   \        0x2   0x....             LDR.N    R0,??DataTable12_7
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0xF242 0x7110      MOVW     R1,#+10000
   \        0xA   0xFBB0 0xF5F1      UDIV     R5,R0,R1
    252          
    253            TIM_TimeBaseStructure.TIM_Period = ONE_TICK;
   \        0xE   0x....             LDR.N    R4,??DataTable12_8
   \       0x10   0xF242 0x46EA      MOVW     R6,#+9450
   \       0x14   0x80A6             STRH     R6,[R4, #+4]
    254            TIM_TimeBaseStructure.TIM_Prescaler = prescale;
   \       0x16   0x8025             STRH     R5,[R4, #+0]
    255            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x80E0             STRH     R0,[R4, #+6]
    256            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x1C   0x2010             MOVS     R0,#+16
   \       0x1E   0x8060             STRH     R0,[R4, #+2]
    257            TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \       0x20   0x0021             MOVS     R1,R4
   \       0x22   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x26   0x.... 0x....      BL       TIM_TimeBaseInit
    258            TIM_ARRPreloadConfig(TIM2, ENABLE);
   \       0x2A   0x2101             MOVS     R1,#+1
   \       0x2C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x30   0x.... 0x....      BL       TIM_ARRPreloadConfig
    259            TIM_Cmd(TIM2, ENABLE);
   \       0x34   0x2101             MOVS     R1,#+1
   \       0x36   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x3A   0x.... 0x....      BL       TIM_Cmd
    260          
    261            TIM_TimeBaseStructure.TIM_Period = ONE_TICK;
   \       0x3E   0x80A6             STRH     R6,[R4, #+4]
    262            TIM_TimeBaseStructure.TIM_Prescaler = prescale;
   \       0x40   0x8025             STRH     R5,[R4, #+0]
    263            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x80E0             STRH     R0,[R4, #+6]
    264            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x46   0x2010             MOVS     R0,#+16
   \       0x48   0x8060             STRH     R0,[R4, #+2]
    265            TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
   \       0x4A   0x....             LDR.N    R6,??DataTable12_9
   \       0x4C   0x0021             MOVS     R1,R4
   \       0x4E   0x0030             MOVS     R0,R6
   \       0x50   0x.... 0x....      BL       TIM_TimeBaseInit
    266            TIM_ARRPreloadConfig(TIM4, ENABLE);
   \       0x54   0x2101             MOVS     R1,#+1
   \       0x56   0x0030             MOVS     R0,R6
   \       0x58   0x.... 0x....      BL       TIM_ARRPreloadConfig
    267            TIM_Cmd(TIM4, ENABLE);
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0x0030             MOVS     R0,R6
   \       0x60   0x.... 0x....      BL       TIM_Cmd
    268          
    269            TIM_TimeBaseStructure.TIM_Period = 20000;
   \       0x64   0xF644 0x6020      MOVW     R0,#+20000
   \       0x68   0x80A0             STRH     R0,[R4, #+4]
    270            TIM_TimeBaseStructure.TIM_Prescaler = prescale;
   \       0x6A   0x8025             STRH     R5,[R4, #+0]
    271            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \       0x6C   0x2000             MOVS     R0,#+0
   \       0x6E   0x80E0             STRH     R0,[R4, #+6]
    272            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x70   0x2010             MOVS     R0,#+16
   \       0x72   0x8060             STRH     R0,[R4, #+2]
    273          
    274            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x74   0x....             LDR.N    R1,??DataTable12_10
   \       0x76   0x2060             MOVS     R0,#+96
   \       0x78   0x8008             STRH     R0,[R1, #+0]
    275            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0x8108             STRH     R0,[R1, #+8]
    276            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x7E   0x2001             MOVS     R0,#+1
   \       0x80   0x8048             STRH     R0,[R1, #+2]
    277            TIM_OCInitStructure.TIM_Pulse = 1500;  // us
   \       0x82   0xF240 0x50DC      MOVW     R0,#+1500
   \       0x86   0x80C8             STRH     R0,[R1, #+6]
    278            TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \       0x88   0x....             LDR.N    R5,??DataTable12_11
   \       0x8A   0x0028             MOVS     R0,R5
   \       0x8C   0x.... 0x....      BL       TIM_OC3Init
    279            TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
   \       0x90   0x0021             MOVS     R1,R4
   \       0x92   0x0028             MOVS     R0,R5
   \       0x94   0x.... 0x....      BL       TIM_TimeBaseInit
    280            TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
   \       0x98   0x2100             MOVS     R1,#+0
   \       0x9A   0x0028             MOVS     R0,R5
   \       0x9C   0x.... 0x....      BL       TIM_OC3PreloadConfig
    281            TIM_ARRPreloadConfig(TIM3, ENABLE);
   \       0xA0   0x2101             MOVS     R1,#+1
   \       0xA2   0x0028             MOVS     R0,R5
   \       0xA4   0x.... 0x....      BL       TIM_ARRPreloadConfig
    282            TIM_Cmd(TIM3, ENABLE);
   \       0xA8   0x2101             MOVS     R1,#+1
   \       0xAA   0x0028             MOVS     R0,R5
   \       0xAC   0x.... 0x....      BL       TIM_Cmd
    283          }
   \       0xB0   0xBD70             POP      {R4-R6,PC}
    284          
    285          // Front Prox IRQHandler

   \                                 In section .text, align 2, keep-with-next
    286          void EXTI9_5_IRQHandler(void) {
   \                     EXTI9_5_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    287            if (EXTI_GetITStatus(EXTI_Prox_Front_Line1) != RESET || EXTI_GetITStatus(EXTI_Prox_Front_Line2) != RESET) {
   \        0x2   0xF44F 0x7080      MOV      R0,#+256
   \        0x6   0x.... 0x....      BL       EXTI_GetITStatus
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD105             BNE.N    ??EXTI9_5_IRQHandler_0
   \        0xE   0xF44F 0x7000      MOV      R0,#+512
   \       0x12   0x.... 0x....      BL       EXTI_GetITStatus
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD02B             BEQ.N    ??EXTI9_5_IRQHandler_1
    288              isClockWise = 0;
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x....             LDR.N    R1,??DataTable12_12
   \       0x1E   0x6008             STR      R0,[R1, #+0]
    289          
    290              if(isRotate == 0) { 
   \       0x20   0x....             LDR.N    R1,??DataTable12_13
   \       0x22   0x6808             LDR      R0,[R1, #+0]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD119             BNE.N    ??EXTI9_5_IRQHandler_2
    291          
    292              isRotate = 1;
   \       0x28   0x2001             MOVS     R0,#+1
   \       0x2A   0x6008             STR      R0,[R1, #+0]
    293              ONE_TICK_COUNTER_CLOCKWISE_ROTATION();
   \       0x2C   0x.... 0x....      BL       ONE_TICK_COUNTER_CLOCKWISE_ROTATION
    294              dir_Idx = (dir_Idx + 1) % 4;
   \       0x30   0x....             LDR.N    R0,??DataTable12_14
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0x1C49             ADDS     R1,R1,#+1
   \       0x36   0x2204             MOVS     R2,#+4
   \       0x38   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \       0x3C   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \       0x40   0x6001             STR      R1,[R0, #+0]
    295          
    296              inner_Map[inner_Map_Idx++] = global_Current_Point;
   \       0x42   0x....             LDR.N    R0,??DataTable12_15
   \       0x44   0x....             LDR.N    R1,??DataTable12_16
   \       0x46   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \       0x4A   0x....             LDR.N    R1,??DataTable12_17
   \       0x4C   0x6804             LDR      R4,[R0, #+0]
   \       0x4E   0xEB01 0x01C4      ADD      R1,R1,R4, LSL #+3
   \       0x52   0xE9C1 0x2300      STRD     R2,R3,[R1, #+0]
   \       0x56   0x6801             LDR      R1,[R0, #+0]
   \       0x58   0x1C49             ADDS     R1,R1,#+1
   \       0x5A   0x6001             STR      R1,[R0, #+0]
    297              }
    298              /*
    299                      EXTI_LineCmd(EXTI_Prox_Right_Line1, ENABLE);
    300                      EXTI_LineCmd(EXTI_Prox_Right_Line2, ENABLE);
    301              */
    302          
    303              isInturrupted = 1;
   \                     ??EXTI9_5_IRQHandler_2: (+1)
   \       0x5C   0x2001             MOVS     R0,#+1
   \       0x5E   0x....             LDR.N    R1,??DataTable12_18
   \       0x60   0x6008             STR      R0,[R1, #+0]
    304              EXTI_ClearITPendingBit(EXTI_Prox_Front_Line1);
   \       0x62   0xF44F 0x7080      MOV      R0,#+256
   \       0x66   0x.... 0x....      BL       EXTI_ClearITPendingBit
    305              EXTI_ClearITPendingBit(EXTI_Prox_Front_Line2);
   \       0x6A   0xF44F 0x7000      MOV      R0,#+512
   \       0x6E   0x.... 0x....      BL       EXTI_ClearITPendingBit
    306            }
    307          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \       0x72   0xBD10             POP      {R4,PC}
    308          
    309          /*
    310          // Right Prox IRQHandler
    311          void EXTI15_10_IRQHandler(void) {
    312            if (EXTI_GetITStatus(EXTI_Prox_Right_Line1) != RESET || EXTI_GetITStatus(EXTI_Prox_Right_Line2) != RESET) {
    313              STOP();
    314              TIM_Cmd(TIM2, DISABLE);
    315          
    316              isClockWise = 1;
    317              while (GPIO_ReadInputDataBit(GPIO_Prox_Right_Port1, GPIO_Prox_Right_Pin1) == 1 &&
    318                     GPIO_ReadInputDataBit(GPIO_Prox_Right_Port2, GPIO_Prox_Right_Pin2) == 1) {
    319                ONE_TICK_CLOCKWISE_ROTATION();
    320              }
    321          
    322              EXTI_ClearITPendingBit(EXTI_Prox_Right_Line2);
    323              EXTI_ClearITPendingBit(EXTI_Prox_Right_Line1);
    324            }
    325          }
    326          */
    327          
    328          // Illumination IRQHandler

   \                                 In section .text, align 2, keep-with-next
    329          void EXTI2_IRQHandler(void) {
   \                     EXTI2_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    330            if (EXTI_GetITStatus(EXTI_Illumination_Line) != RESET) {
   \        0x2   0x2004             MOVS     R0,#+4
   \        0x4   0x.... 0x....      BL       EXTI_GetITStatus
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD005             BEQ.N    ??EXTI2_IRQHandler_0
    331          
    332              isDark = 1;
   \        0xC   0x2001             MOVS     R0,#+1
   \        0xE   0x....             LDR.N    R1,??DataTable12_19
   \       0x10   0x6008             STR      R0,[R1, #+0]
    333          
    334              EXTI_ClearITPendingBit(EXTI_Illumination_Line);
   \       0x12   0x2004             MOVS     R0,#+4
   \       0x14   0x.... 0x....      BL       EXTI_ClearITPendingBit
    335            }
    336          }
   \                     ??EXTI2_IRQHandler_0: (+1)
   \       0x18   0xBD01             POP      {R0,PC}
    337          
    338          // Rotation Timer

   \                                 In section .text, align 2, keep-with-next
    339          void TIM2_IRQHandler(void) {
   \                     TIM2_IRQHandler: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    340            if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0xF05F 0x4080      MOVS     R0,#+1073741824
   \        0x8   0x.... 0x....      BL       TIM_GetITStatus
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD01F             BEQ.N    ??TIM2_IRQHandler_0
    341          
    342              isRotate = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x....             LDR.N    R1,??DataTable12_13
   \       0x14   0x6008             STR      R0,[R1, #+0]
    343          
    344              global_Current_Point.x += dir[dir_Idx][0];
   \       0x16   0x....             LDR.N    R4,??DataTable12_16
   \       0x18   0x....             LDR.N    R5,??DataTable12_14
   \       0x1A   0x....             LDR.N    R6,??DataTable12_20
   \       0x1C   0x6828             LDR      R0,[R5, #+0]
   \       0x1E   0xF856 0x0030      LDR      R0,[R6, R0, LSL #+3]
   \       0x22   0x.... 0x....      BL       __aeabi_i2f
   \       0x26   0x6821             LDR      R1,[R4, #+0]
   \       0x28   0x.... 0x....      BL       __aeabi_fadd
   \       0x2C   0x6020             STR      R0,[R4, #+0]
    345              global_Current_Point.y += dir[dir_Idx][1];
   \       0x2E   0x6828             LDR      R0,[R5, #+0]
   \       0x30   0xEB06 0x00C0      ADD      R0,R6,R0, LSL #+3
   \       0x34   0x6840             LDR      R0,[R0, #+4]
   \       0x36   0x.... 0x....      BL       __aeabi_i2f
   \       0x3A   0x6861             LDR      R1,[R4, #+4]
   \       0x3C   0x.... 0x....      BL       __aeabi_fadd
   \       0x40   0x6060             STR      R0,[R4, #+4]
    346              STOP();
   \       0x42   0x.... 0x....      BL       STOP
    347          
    348              TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x4C   0x.... 0x....      BL       TIM_ClearITPendingBit
    349            }
    350          }
   \                     ??TIM2_IRQHandler_0: (+1)
   \       0x50   0xBD70             POP      {R4-R6,PC}
    351          
    352          // Forwarding Timer

   \                                 In section .text, align 2, keep-with-next
    353          void TIM4_IRQHandler(void) {
   \                     TIM4_IRQHandler: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    354            if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
   \        0x4   0x.... 0x....      LDR.W    R8,??DataTable12_9
   \        0x8   0x2101             MOVS     R1,#+1
   \        0xA   0x4640             MOV      R0,R8
   \        0xC   0x.... 0x....      BL       TIM_GetITStatus
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD03F             BEQ.N    ??TIM4_IRQHandler_0
    355              STOP();
   \       0x14   0x.... 0x....      BL       STOP
    356              if(!isRotate) {
   \       0x18   0x....             LDR.N    R0,??DataTable12_13
   \       0x1A   0x6800             LDR      R0,[R0, #+0]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD135             BNE.N    ??TIM4_IRQHandler_1
    357                global_Current_Point.x += FORWARD_TICK * cosf(thetaToRad(global_Theta));
                                                                ^
Warning[Pe223]: function "cosf" declared implicitly

        global_Current_Point.x += FORWARD_TICK * cosf(thetaToRad(global_Theta));
                                                      ^
"c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\configuration.c",357  Warning[Pe223]: 
          function "thetaToRad" declared implicitly
   \       0x20   0x....             LDR.N    R6,??DataTable12_21
   \       0x22   0x6830             LDR      R0,[R6, #+0]
   \       0x24   0x.... 0x....      BL       thetaToRad
   \       0x28   0x.... 0x....      BL       cosf
   \       0x2C   0x4681             MOV      R9,R0
   \       0x2E   0x2400             MOVS     R4,#+0
   \       0x30   0x....             LDR.N    R5,??DataTable12_22
   \       0x32   0x....             LDR.N    R7,??DataTable12_16
   \       0x34   0x6838             LDR      R0,[R7, #+0]
   \       0x36   0x.... 0x....      BL       __aeabi_f2d
   \       0x3A   0x4682             MOV      R10,R0
   \       0x3C   0x468B             MOV      R11,R1
   \       0x3E   0x4648             MOV      R0,R9
   \       0x40   0x.... 0x....      BL       __aeabi_i2d
   \       0x44   0x0022             MOVS     R2,R4
   \       0x46   0x002B             MOVS     R3,R5
   \       0x48   0x.... 0x....      BL       __aeabi_dmul
   \       0x4C   0x4652             MOV      R2,R10
   \       0x4E   0x465B             MOV      R3,R11
   \       0x50   0x.... 0x....      BL       __aeabi_dadd
   \       0x54   0x.... 0x....      BL       __aeabi_d2f
   \       0x58   0x6038             STR      R0,[R7, #+0]
    358                global_Current_Point.y += FORWARD_TICK * sinf(thetaToRad(global_Theta));
                                                                ^
Warning[Pe223]: function "sinf" declared implicitly
   \       0x5A   0x6830             LDR      R0,[R6, #+0]
   \       0x5C   0x.... 0x....      BL       thetaToRad
   \       0x60   0x.... 0x....      BL       sinf
   \       0x64   0x0006             MOVS     R6,R0
   \       0x66   0x6878             LDR      R0,[R7, #+4]
   \       0x68   0x.... 0x....      BL       __aeabi_f2d
   \       0x6C   0x4682             MOV      R10,R0
   \       0x6E   0x468B             MOV      R11,R1
   \       0x70   0x0030             MOVS     R0,R6
   \       0x72   0x.... 0x....      BL       __aeabi_i2d
   \       0x76   0x0022             MOVS     R2,R4
   \       0x78   0x002B             MOVS     R3,R5
   \       0x7A   0x.... 0x....      BL       __aeabi_dmul
   \       0x7E   0x4652             MOV      R2,R10
   \       0x80   0x465B             MOV      R3,R11
   \       0x82   0x.... 0x....      BL       __aeabi_dadd
   \       0x86   0x.... 0x....      BL       __aeabi_d2f
   \       0x8A   0x6078             STR      R0,[R7, #+4]
    359              }
    360              TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
   \                     ??TIM4_IRQHandler_1: (+1)
   \       0x8C   0x2101             MOVS     R1,#+1
   \       0x8E   0x4640             MOV      R0,R8
   \       0x90   0x.... 0x....      BL       TIM_ClearITPendingBit
    361            }
    362          }
   \                     ??TIM4_IRQHandler_0: (+1)
   \       0x94   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}
    363          

   \                                 In section .text, align 2, keep-with-next
    364          void USART1_IRQHandler() {
   \                     USART1_IRQHandler: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    365            uint16_t word;
    366            if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
   \        0x2   0x....             LDR.N    R4,??DataTable12_5
   \        0x4   0xF240 0x5525      MOVW     R5,#+1317
   \        0x8   0x0029             MOVS     R1,R5
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       USART_GetITStatus
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD00B             BEQ.N    ??USART1_IRQHandler_0
    367              // the most recent received data by the USART2 peripheral
    368              word = USART_ReceiveData(USART1);
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       USART_ReceiveData
   \       0x1A   0x0001             MOVS     R1,R0
    369          
    370              USART_SendData(USART2, word);
   \       0x1C   0xB289             UXTH     R1,R1
   \       0x1E   0x....             LDR.N    R0,??DataTable12_6
   \       0x20   0x.... 0x....      BL       USART_SendData
    371          
    372              // clear 'Read data register not empty' flag
    373              USART_ClearITPendingBit(USART1, USART_IT_RXNE);
   \       0x24   0x0029             MOVS     R1,R5
   \       0x26   0x0020             MOVS     R0,R4
   \       0x28   0x.... 0x....      BL       USART_ClearITPendingBit
    374            }
    375          }
   \                     ??USART1_IRQHandler_0: (+1)
   \       0x2C   0xBD31             POP      {R0,R4,R5,PC}
    376          

   \                                 In section .text, align 2, keep-with-next
    377          void USART2_IRQHandler() {
   \                     USART2_IRQHandler: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    378            uint16_t word;
    379            if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
   \        0x2   0x....             LDR.N    R4,??DataTable12_6
   \        0x4   0xF240 0x5525      MOVW     R5,#+1317
   \        0x8   0x0029             MOVS     R1,R5
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       USART_GetITStatus
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD00B             BEQ.N    ??USART2_IRQHandler_0
    380              // the most recent received data by the USART2 peripheral
    381              word = USART_ReceiveData(USART2);
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       USART_ReceiveData
   \       0x1A   0x0001             MOVS     R1,R0
    382          
    383              USART_SendData(USART1, word);
   \       0x1C   0xB289             UXTH     R1,R1
   \       0x1E   0x....             LDR.N    R0,??DataTable12_5
   \       0x20   0x.... 0x....      BL       USART_SendData
    384          
    385              // clear 'Read data register not empty' flag
    386              USART_ClearITPendingBit(USART2, USART_IT_RXNE);
   \       0x24   0x0029             MOVS     R1,R5
   \       0x26   0x0020             MOVS     R0,R4
   \       0x28   0x.... 0x....      BL       USART_ClearITPendingBit
    387            }
    388          }
   \                     ??USART2_IRQHandler_0: (+1)
   \       0x2C   0xBD31             POP      {R0,R4,R5,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \        0x0   0x....'....        DC32     Right_Interrupt_Status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \        0x0   0x....'....        DC32     EXTI_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \        0x0   0x4001'1800        DC32     0x40011800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \        0x0   0x4001'1400        DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \        0x0   0x4001'3800        DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \        0x0   0x4000'4400        DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \        0x0   0x....'....        DC32     TIM_TimeBaseStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \        0x0   0x4000'0800        DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \        0x0   0x....'....        DC32     TIM_OCInitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \        0x0   0x....'....        DC32     isClockWise

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \        0x0   0x....'....        DC32     isRotate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \        0x0   0x....'....        DC32     dir_Idx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \        0x0   0x....'....        DC32     inner_Map_Idx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \        0x0   0x....'....        DC32     global_Current_Point

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \        0x0   0x....'....        DC32     inner_Map

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \        0x0   0x....'....        DC32     isInturrupted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \        0x0   0x....'....        DC32     isDark

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \        0x0   0x....'....        DC32     dir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \        0x0   0x....'....        DC32     global_Theta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \        0x0   0x4059'0000        DC32     0x40590000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EXTI2_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
       8   EXTI9_5_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> ONE_TICK_COUNTER_CLOCKWISE_ROTATION
       8   EXTI_Cmd
         8   -> EXTI_Init
       8   EXTI_Configure
         8   -> EXTI_Init
         8   -> GPIO_EXTILineConfig
      16   GPIO_Configuration
        16   -> GPIO_Init
       8   NVIC_Configuration
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> TIM_ITConfig
      16   PWM_Configuration
        16   -> TIM_ARRPreloadConfig
        16   -> TIM_Cmd
        16   -> TIM_OC3Init
        16   -> TIM_OC3PreloadConfig
        16   -> TIM_TimeBaseInit
       8   RCC_Configuration
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
       8   Right_Interrupt_Disable
         8   -> EXTI_Init
       8   Right_Interrupt_Enable
         8   -> EXTI_Init
      16   TIM2_IRQHandler
        16   -> STOP
        16   -> TIM_ClearITPendingBit
        16   -> TIM_GetITStatus
        16   -> __aeabi_fadd
        16   -> __aeabi_i2f
      40   TIM4_IRQHandler
        40   -> STOP
        40   -> TIM_ClearITPendingBit
        40   -> TIM_GetITStatus
        40   -> __aeabi_d2f
        40   -> __aeabi_dadd
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_i2d
        40   -> cosf
        40   -> sinf
        40   -> thetaToRad
      48   USART12_Init
        48   -> USART_Cmd
        48   -> USART_ITConfig
        48   -> USART_Init
      16   USART1_IRQHandler
        16   -> USART_ClearITPendingBit
        16   -> USART_GetITStatus
        16   -> USART_ReceiveData
        16   -> USART_SendData
      16   USART2_IRQHandler
        16   -> USART_ClearITPendingBit
        16   -> USART_GetITStatus
        16   -> USART_ReceiveData
        16   -> USART_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
      26  EXTI2_IRQHandler
     116  EXTI9_5_IRQHandler
      26  EXTI_Cmd
     110  EXTI_Configure
       8  EXTI_InitStructure
     270  GPIO_Configuration
     168  NVIC_Configuration
     178  PWM_Configuration
      98  RCC_Configuration
      24  Right_Interrupt_Disable
      24  Right_Interrupt_Enable
       2  Right_Interrupt_Status
      82  TIM2_IRQHandler
     152  TIM4_IRQHandler
      16  TIM_OCInitStructure
      12  TIM_TimeBaseStructure
     138  USART12_Init
      46  USART1_IRQHandler
      46  USART2_IRQHandler
      32  dir
       4  dir_Idx
     800  inner_Map
       4  inner_Map_Idx
       4  isClockWise
       4  isDark
       4  isInturrupted

 
   858 bytes in section .bss
    32 bytes in section .data
 1'596 bytes in section .text
 
 1'596 bytes of CODE memory
   890 bytes of DATA memory

Errors: none
Warnings: 5
