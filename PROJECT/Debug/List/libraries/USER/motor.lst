###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         22/Dec/2023  05:46:08
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\motor.c
#    Command line      =
#        -f
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER\motor.o.rsp
#        (c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\motor.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\List\libraries\USER
#        -o
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\CMSIS\DeviceSupport\
#        -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\LCD\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\user\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\user\inc\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\ -I
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\ -Ol -I
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER\motor.o.d
#    Locale            =  C
#    List file         =
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\List\libraries\USER\motor.lst
#    Object file       =
#        c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\Debug\Obj\libraries\USER\motor.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

c:\Users\hyuunnnn\Documents\GitHub\iar\PROJECT\libraries\USER\motor.c
      1          #include "motor.h"
      2          
      3          #include "definitions.h"
      4          

   \                                 In section .bss, align 4
      5          int isFroward = 0;
   \                     isFroward:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
      6          int isRotate = 0;
   \                     isRotate:
   \        0x0                      DS8 4
      7          

   \                                 In section .text, align 2, keep-with-next
      8          void delay() {
      9            int i;
     10            for (i = 0; i < 10000; i++)
   \                     delay: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0xE000             B.N      ??delay_0
   \                     ??delay_1: (+1)
   \        0x4   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_0: (+1)
   \        0x6   0xF242 0x7110      MOVW     R1,#+10000
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xDBFA             BLT.N    ??delay_1
     11              ;
     12          }
   \        0xE   0x4770             BX       LR
     13          

   \                                 In section .text, align 2, keep-with-next
     14          void LEFT_MOTOR_FORWARD(void) {
   \                     LEFT_MOTOR_FORWARD: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     15            GPIO_ResetBits(GPIO_Left_Motor_Port, GPIO_Motor_In1_Pin);
   \        0x2   0x....             LDR.N    R4,??DataTable7
   \        0x4   0x2104             MOVS     R1,#+4
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       GPIO_ResetBits
     16            GPIO_SetBits(GPIO_Left_Motor_Port, GPIO_Motor_In2_Pin);
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       GPIO_SetBits
     17          }
   \       0x14   0xBD10             POP      {R4,PC}
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void LEFT_MOTOR_BACKWARD(void) {
   \                     LEFT_MOTOR_BACKWARD: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     20            GPIO_ResetBits(GPIO_Left_Motor_Port, GPIO_Motor_In2_Pin);
   \        0x2   0x....             LDR.N    R4,??DataTable7
   \        0x4   0x2108             MOVS     R1,#+8
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       GPIO_ResetBits
     21            GPIO_SetBits(GPIO_Left_Motor_Port, GPIO_Motor_In1_Pin);
   \        0xC   0x2104             MOVS     R1,#+4
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       GPIO_SetBits
     22          }
   \       0x14   0xBD10             POP      {R4,PC}
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void LEFT_MOTOR_STOP(void) {
   \                     LEFT_MOTOR_STOP: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     25            GPIO_ResetBits(GPIO_Left_Motor_Port, GPIO_Motor_In1_Pin);
   \        0x2   0x....             LDR.N    R4,??DataTable7
   \        0x4   0x2104             MOVS     R1,#+4
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       GPIO_ResetBits
     26            GPIO_ResetBits(GPIO_Left_Motor_Port, GPIO_Motor_In2_Pin);
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       GPIO_ResetBits
     27          }
   \       0x14   0xBD10             POP      {R4,PC}
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void RIGHT_MOTOR_FORWARD(void) {
   \                     RIGHT_MOTOR_FORWARD: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     30            GPIO_SetBits(GPIO_Right_Motor_Port, GPIO_Motor_In3_Pin);
   \        0x2   0x....             LDR.N    R4,??DataTable7
   \        0x4   0x2110             MOVS     R1,#+16
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       GPIO_SetBits
     31            GPIO_ResetBits(GPIO_Right_Motor_Port, GPIO_Motor_In4_Pin);
   \        0xC   0x2120             MOVS     R1,#+32
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       GPIO_ResetBits
     32          }
   \       0x14   0xBD10             POP      {R4,PC}
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void RIGHT_MOTOR_BACKWARD(void) {
   \                     RIGHT_MOTOR_BACKWARD: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     35            GPIO_SetBits(GPIO_Right_Motor_Port, GPIO_Motor_In4_Pin);
   \        0x2   0x....             LDR.N    R4,??DataTable7
   \        0x4   0x2120             MOVS     R1,#+32
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       GPIO_SetBits
     36            GPIO_ResetBits(GPIO_Right_Motor_Port, GPIO_Motor_In3_Pin);
   \        0xC   0x2110             MOVS     R1,#+16
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       GPIO_ResetBits
     37          }
   \       0x14   0xBD10             POP      {R4,PC}
     38          

   \                                 In section .text, align 2, keep-with-next
     39          void RIGHT_MOTOR_STOP(void) {
   \                     RIGHT_MOTOR_STOP: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     40            GPIO_ResetBits(GPIO_Right_Motor_Port, GPIO_Motor_In3_Pin);
   \        0x2   0x....             LDR.N    R4,??DataTable7
   \        0x4   0x2110             MOVS     R1,#+16
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       GPIO_ResetBits
     41            GPIO_ResetBits(GPIO_Right_Motor_Port, GPIO_Motor_In4_Pin);
   \        0xC   0x2120             MOVS     R1,#+32
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       GPIO_ResetBits
     42          }
   \       0x14   0xBD10             POP      {R4,PC}
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void FORWARD(void) {
   \                     FORWARD: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     45            LEFT_MOTOR_FORWARD();
   \        0x2   0x.... 0x....      BL       LEFT_MOTOR_FORWARD
     46            RIGHT_MOTOR_FORWARD();
   \        0x6   0x.... 0x....      BL       RIGHT_MOTOR_FORWARD
     47          }
   \        0xA   0xBD01             POP      {R0,PC}
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void BACKWARD(void) {
   \                     BACKWARD: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     50            LEFT_MOTOR_BACKWARD();
   \        0x2   0x.... 0x....      BL       LEFT_MOTOR_BACKWARD
     51            RIGHT_MOTOR_BACKWARD();
   \        0x6   0x.... 0x....      BL       RIGHT_MOTOR_BACKWARD
     52          }
   \        0xA   0xBD01             POP      {R0,PC}
     53          

   \                                 In section .text, align 2, keep-with-next
     54          void STOP(void) {
   \                     STOP: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     55            LEFT_MOTOR_STOP();
   \        0x2   0x.... 0x....      BL       LEFT_MOTOR_STOP
     56            RIGHT_MOTOR_STOP();
   \        0x6   0x.... 0x....      BL       RIGHT_MOTOR_STOP
     57          }
   \        0xA   0xBD01             POP      {R0,PC}
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void CLOCKWISE_ROTATION(void) {
   \                     CLOCKWISE_ROTATION: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     60            LEFT_MOTOR_BACKWARD();
   \        0x2   0x.... 0x....      BL       LEFT_MOTOR_BACKWARD
     61            RIGHT_MOTOR_FORWARD();
   \        0x6   0x.... 0x....      BL       RIGHT_MOTOR_FORWARD
     62          }
   \        0xA   0xBD01             POP      {R0,PC}
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void COUNTER_CLOCKWISE_ROTATION(void) {
   \                     COUNTER_CLOCKWISE_ROTATION: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     65            LEFT_MOTOR_FORWARD();
   \        0x2   0x.... 0x....      BL       LEFT_MOTOR_FORWARD
     66            RIGHT_MOTOR_BACKWARD();
   \        0x6   0x.... 0x....      BL       RIGHT_MOTOR_BACKWARD
     67          }
   \        0xA   0xBD01             POP      {R0,PC}
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void ONE_TICK_FORWARD(void) {
   \                     ONE_TICK_FORWARD: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     70            TIM_SetCounter(TIM4, ONE_TICK);
   \        0x2   0xF242 0x41EA      MOVW     R1,#+9450
   \        0x6   0x....             LDR.N    R0,??DataTable7_1
   \        0x8   0x.... 0x....      BL       TIM_SetCounter
     71            FORWARD();
   \        0xC   0x.... 0x....      BL       FORWARD
     72          }
   \       0x10   0xBD01             POP      {R0,PC}
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void ONE_TICK_CLOCKWISE_ROTATION(void) {
   \                     ONE_TICK_CLOCKWISE_ROTATION: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     75            
     76            TIM_SetCounter(TIM2, ONE_TICK);
   \        0x2   0xF242 0x41EA      MOVW     R1,#+9450
   \        0x6   0xF05F 0x4080      MOVS     R0,#+1073741824
   \        0xA   0x.... 0x....      BL       TIM_SetCounter
     77            CLOCKWISE_ROTATION();
   \        0xE   0x.... 0x....      BL       CLOCKWISE_ROTATION
     78          }
   \       0x12   0xBD01             POP      {R0,PC}
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void ONE_TICK_COUNTER_CLOCKWISE_ROTATION(void) {
   \                     ONE_TICK_COUNTER_CLOCKWISE_ROTATION: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     81            TIM_SetCounter(TIM2, ONE_TICK);
   \        0x2   0xF242 0x41EA      MOVW     R1,#+9450
   \        0x6   0xF05F 0x4080      MOVS     R0,#+1073741824
   \        0xA   0x.... 0x....      BL       TIM_SetCounter
     82            COUNTER_CLOCKWISE_ROTATION();
   \        0xE   0x.... 0x....      BL       COUNTER_CLOCKWISE_ROTATION
     83          }
   \       0x12   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x4001'1800        DC32     0x40011800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x4000'0800        DC32     0x40000800

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BACKWARD
         8   -> LEFT_MOTOR_BACKWARD
         8   -> RIGHT_MOTOR_BACKWARD
       8   CLOCKWISE_ROTATION
         8   -> LEFT_MOTOR_BACKWARD
         8   -> RIGHT_MOTOR_FORWARD
       8   COUNTER_CLOCKWISE_ROTATION
         8   -> LEFT_MOTOR_FORWARD
         8   -> RIGHT_MOTOR_BACKWARD
       8   FORWARD
         8   -> LEFT_MOTOR_FORWARD
         8   -> RIGHT_MOTOR_FORWARD
       8   LEFT_MOTOR_BACKWARD
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   LEFT_MOTOR_FORWARD
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   LEFT_MOTOR_STOP
         8   -> GPIO_ResetBits
       8   ONE_TICK_CLOCKWISE_ROTATION
         8   -> CLOCKWISE_ROTATION
         8   -> TIM_SetCounter
       8   ONE_TICK_COUNTER_CLOCKWISE_ROTATION
         8   -> COUNTER_CLOCKWISE_ROTATION
         8   -> TIM_SetCounter
       8   ONE_TICK_FORWARD
         8   -> FORWARD
         8   -> TIM_SetCounter
       8   RIGHT_MOTOR_BACKWARD
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   RIGHT_MOTOR_FORWARD
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   RIGHT_MOTOR_STOP
         8   -> GPIO_ResetBits
       8   STOP
         8   -> LEFT_MOTOR_STOP
         8   -> RIGHT_MOTOR_STOP
       0   delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
      12  BACKWARD
      12  CLOCKWISE_ROTATION
      12  COUNTER_CLOCKWISE_ROTATION
      12  FORWARD
      22  LEFT_MOTOR_BACKWARD
      22  LEFT_MOTOR_FORWARD
      22  LEFT_MOTOR_STOP
      20  ONE_TICK_CLOCKWISE_ROTATION
      20  ONE_TICK_COUNTER_CLOCKWISE_ROTATION
      18  ONE_TICK_FORWARD
      22  RIGHT_MOTOR_BACKWARD
      22  RIGHT_MOTOR_FORWARD
      22  RIGHT_MOTOR_STOP
      12  STOP
      16  delay
       4  isFroward
       4  isRotate

 
   8 bytes in section .bss
 274 bytes in section .text
 
 274 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
